/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  VaultFactory,
  VaultFactoryInterface,
} from "../../../../contracts/peripheral/vault/VaultFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vaultBeacon",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gate",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "VaultExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "quote",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    name: "CreateVault",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "quote",
        type: "address",
      },
      {
        internalType: "address",
        name: "manager",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "createVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gate",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllVaults",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "index",
        type: "bytes32",
      },
    ],
    name: "indexToVault",
    outputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalVaults",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vaultBeacon",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "vaults",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161160f38038061160f83398101604081905261002f916100bb565b6100383361004f565b6001600160a01b039081166080521660a0526100ee565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100b657600080fd5b919050565b600080604083850312156100ce57600080fd5b6100d78361009f565b91506100e56020840161009f565b90509250929050565b60805160a0516114f561011a600039600081816101b601526103120152600061013a01526114f56000f3fe60806040523480156200001157600080fd5b5060043610620000c35760003560e01c80638da5cb5b116200007a5780638da5cb5b146200018557806397331bf914620001975780639d343be114620001b0578063ac9650d814620001d8578063c4d66de814620001fe578063f2fde38b146200021557600080fd5b80630dae943c14620000c85780634b5426c014620000fc578063715018a614620001285780637a0ebc8814620001345780638c64ea4a146200015c5780638d6540231462000173575b600080fd5b620000df620000d936600462000a2c565b6200022c565b6040516001600160a01b0390911681526020015b60405180910390f35b620000df6200010d36600462000ac3565b6002602052600090815260409020546001600160a01b031681565b6200013262000423565b005b620000df7f000000000000000000000000000000000000000000000000000000000000000081565b620000df6200016d36600462000ac3565b6200043b565b600154604051908152602001620000f3565b6000546001600160a01b0316620000df565b620001a162000466565b604051620000f3919062000add565b620000df7f000000000000000000000000000000000000000000000000000000000000000081565b620001ef620001e936600462000b2c565b6200053f565b604051620000f3919062000bfa565b620001326200020f36600462000c60565b62000647565b620001326200022636600462000c60565b62000782565b60006200023862000801565b60008585858560405160200162000253949392919062000c7e565b60408051601f198184030181529181528151602092830120600081815260029093529120549091506001600160a01b031615620002a35760405163108e5c5f60e21b815260040160405180910390fd5b600086620002b96000546001600160a01b031690565b6040516001600160a01b0392831660248201529082166044820152908716606482015260840160408051601f198184030181529181526020820180516001600160e01b031663c0c53b8b60e01b179052519091506000907f00000000000000000000000000000000000000000000000000000000000000009083906200033f9062000a01565b6200034c92919062000cca565b604051809103906000f08015801562000369573d6000803e3d6000fd5b50600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b03199081166001600160a01b038481169182179093556000878152600260209081526040918290208054909416831790935580518d85168152938c1692840192909252908201529091507fb099da66a8504770c8deb56a35848ec236bde5e64dd9223d77c277b1ae09d4339060600160405180910390a1925050505b949350505050565b6200042d62000801565b6200043960006200085d565b565b600181815481106200044c57600080fd5b6000918252602090912001546001600160a01b0316905081565b60015460609060009067ffffffffffffffff8111156200048a576200048a62000cf0565b604051908082528060200260200182016040528015620004b4578160200160208202803683370190505b50905060005b600154811015620005395760018181548110620004db57620004db62000d06565b9060005260206000200160009054906101000a90046001600160a01b03168282815181106200050e576200050e62000d06565b6001600160a01b0390921660209283029190910190910152620005318162000d1c565b9050620004ba565b50919050565b60608167ffffffffffffffff8111156200055d576200055d62000cf0565b6040519080825280602002602001820160405280156200059257816020015b60608152602001906001900390816200057c5790505b50905060005b8281101562000640576200060a30858584818110620005bb57620005bb62000d06565b9050602002810190620005cf919062000d44565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620008ad92505050565b8282815181106200061f576200061f62000d06565b60200260200101819052508080620006379062000d1c565b91505062000598565b5092915050565b600054600160a81b900460ff16158080156200067057506000546001600160a01b90910460ff16105b80620006935750303b158015620006935750600054600160a01b900460ff166001145b620006fc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff60a01b1916600160a01b17905580156200072a576000805460ff60a81b1916600160a81b1790555b62000735826200085d565b80156200077e576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6200078c62000801565b6001600160a01b038116620007f35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620006f3565b620007fe816200085d565b50565b6000546001600160a01b03163314620004395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620006f3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060620008d583836040518060600160405280602781526020016200149960279139620008dc565b9392505050565b6060600080856001600160a01b031685604051620008fb919062000d95565b600060405180830381855af49150503d806000811462000938576040519150601f19603f3d011682016040523d82523d6000602084013e6200093d565b606091505b509150915062000950868383876200095a565b9695505050505050565b60608315620009ce578251600003620009c6576001600160a01b0385163b620009c65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620006f3565b50816200041b565b6200041b8383815115620009e55781518083602001fd5b8060405162461bcd60e51b8152600401620006f3919062000db3565b6106d08062000dc983390190565b80356001600160a01b038116811462000a2757600080fd5b919050565b6000806000806060858703121562000a4357600080fd5b62000a4e8562000a0f565b935062000a5e6020860162000a0f565b9250604085013567ffffffffffffffff8082111562000a7c57600080fd5b818701915087601f83011262000a9157600080fd5b81358181111562000aa157600080fd5b88602082850101111562000ab457600080fd5b95989497505060200194505050565b60006020828403121562000ad657600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101562000b205783516001600160a01b03168352928401929184019160010162000af9565b50909695505050505050565b6000806020838503121562000b4057600080fd5b823567ffffffffffffffff8082111562000b5957600080fd5b818501915085601f83011262000b6e57600080fd5b81358181111562000b7e57600080fd5b8660208260051b850101111562000b9457600080fd5b60209290920196919550909350505050565b60005b8381101562000bc357818101518382015260200162000ba9565b50506000910152565b6000815180845262000be681602086016020860162000ba6565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101562000c5357603f1988860301845262000c4085835162000bcc565b9450928501929085019060010162000c21565b5092979650505050505050565b60006020828403121562000c7357600080fd5b620008d58262000a0f565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b6001600160a01b03831681526040602082018190526000906200041b9083018462000bcc565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820162000d3d57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000808335601e1984360301811262000d5c57600080fd5b83018035915067ffffffffffffffff82111562000d7857600080fd5b60200191503681900382131562000d8e57600080fd5b9250929050565b6000825162000da981846020870162000ba6565b9190910192915050565b602081526000620008d5602083018462000bcc56fe60806040526040516106d03803806106d083398101604081905261002291610424565b818161003082826000610039565b5050505061054e565b610042836100fa565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100835750805b156100f5576100f3836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ed91906104e4565b8361027e565b505b505050565b6001600160a01b0381163b6101645760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101d8816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c991906104e4565b6001600160a01b03163b151590565b61023d5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b606482015260840161015b565b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b0392909216919091179055565b60606102a383836040518060600160405280602781526020016106a9602791396102aa565b9392505050565b6060600080856001600160a01b0316856040516102c791906104ff565b600060405180830381855af49150503d8060008114610302576040519150601f19603f3d011682016040523d82523d6000602084013e610307565b606091505b50909250905061031986838387610323565b9695505050505050565b6060831561039257825160000361038b576001600160a01b0385163b61038b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161015b565b508161039c565b61039c83836103a4565b949350505050565b8151156103b45781518083602001fd5b8060405162461bcd60e51b815260040161015b919061051b565b80516001600160a01b03811681146103e557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561041b578181015183820152602001610403565b50506000910152565b6000806040838503121561043757600080fd5b610440836103ce565b60208401519092506001600160401b038082111561045d57600080fd5b818501915085601f83011261047157600080fd5b815181811115610483576104836103ea565b604051601f8201601f19908116603f011681019083821181831017156104ab576104ab6103ea565b816040528281528860208487010111156104c457600080fd5b6104d5836020830160208801610400565b80955050505050509250929050565b6000602082840312156104f657600080fd5b6102a3826103ce565b60008251610511818460208701610400565b9190910192915050565b602081526000825180602084015261053a816040850160208701610400565b601f01601f19169190910160400192915050565b61014c8061055d6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610029565b6100c2565b565b600061005c7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bd91906100e6565b905090565b3660008037600080366000845af43d6000803e8080156100e1573d6000f35b3d6000fd5b6000602082840312156100f857600080fd5b81516001600160a01b038116811461010f57600080fd5b939250505056fea2646970667358221220935f9019fd210f57ed87e3fd93b3f52a97646a5419d8fe6770b3303af8fd17c564736f6c63430008130033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122005cf833c8d9dfdae9f9c47f71284c79c199b74984b322a87eea127a2655ea09364736f6c63430008130033";

type VaultFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultFactory__factory extends ContractFactory {
  constructor(...args: VaultFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vaultBeacon: PromiseOrValue<string>,
    _gate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VaultFactory> {
    return super.deploy(
      _vaultBeacon,
      _gate,
      overrides || {}
    ) as Promise<VaultFactory>;
  }
  override getDeployTransaction(
    _vaultBeacon: PromiseOrValue<string>,
    _gate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vaultBeacon, _gate, overrides || {});
  }
  override attach(address: string): VaultFactory {
    return super.attach(address) as VaultFactory;
  }
  override connect(signer: Signer): VaultFactory__factory {
    return super.connect(signer) as VaultFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultFactoryInterface {
    return new utils.Interface(_abi) as VaultFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultFactory {
    return new Contract(address, _abi, signerOrProvider) as VaultFactory;
  }
}
