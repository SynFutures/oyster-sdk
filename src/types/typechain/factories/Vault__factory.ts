/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { Vault, VaultInterface } from "../Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gate",
        type: "address",
      },
      {
        internalType: "address",
        name: "_weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ArrearExists",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientDeposit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "requested",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
    ],
    name: "InsufficientShare",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxOrderNums",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxPairNums",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxRangeNums",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "evil",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "NoDirectTransfer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "evil",
        type: "address",
      },
    ],
    name: "NotFactory",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "evil",
        type: "address",
      },
    ],
    name: "NotManager",
    type: "error",
  },
  {
    inputs: [],
    name: "NotReady",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fakeInstrument",
        type: "address",
      },
    ],
    name: "NotSynFuturesInstrument",
    type: "error",
  },
  {
    inputs: [],
    name: "NotTradeable",
    type: "error",
  },
  {
    inputs: [],
    name: "NotWETHQuote",
    type: "error",
  },
  {
    inputs: [],
    name: "StillPendingInGate",
    type: "error",
  },
  {
    inputs: [],
    name: "SuspendedVault",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "UnsafeToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "expiry",
        type: "uint32",
      },
    ],
    name: "AddInvolvedPair",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "native",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "expiry",
        type: "uint32",
      },
    ],
    name: "RemoveInvolvedPair",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "enum Stage",
            name: "stage",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "quote",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "maxPair",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "maxRange",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "maxOrder",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "commissionRatio",
            type: "uint16",
          },
          {
            internalType: "uint128",
            name: "minQuoteAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "liveThreshold",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct Configuration",
        name: "config",
        type: "tuple",
      },
    ],
    name: "SetConfiguration",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newManager",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "oldManager",
        type: "address",
      },
    ],
    name: "SetManager",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum Phase",
            name: "phase",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "native",
            type: "bool",
          },
          {
            internalType: "uint128",
            name: "quantity",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct Arrear",
        name: "arrear",
        type: "tuple",
      },
    ],
    name: "UpdateArrear",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint128",
        name: "commission",
        type: "uint128",
      },
    ],
    name: "UpdateCommision",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "share",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "entryValue",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct Stake",
        name: "stake",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalShare",
        type: "uint256",
      },
    ],
    name: "UpdateStake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "native",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "RATIO_BASE",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        internalType: "bytes32[2]",
        name: "args",
        type: "bytes32[2]",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "entryFeeIndex",
            type: "uint128",
          },
          {
            internalType: "uint96",
            name: "balance",
            type: "uint96",
          },
          {
            internalType: "uint160",
            name: "sqrtEntryPX96",
            type: "uint160",
          },
        ],
        internalType: "struct Range",
        name: "range",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "expiry",
        type: "uint32",
      },
      {
        internalType: "uint240[3]",
        name: "encodedTicks",
        type: "uint240[3]",
      },
    ],
    name: "batchCancel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        internalType: "bytes32[3]",
        name: "args",
        type: "bytes32[3]",
      },
    ],
    name: "batchPlace",
    outputs: [
      {
        internalType: "uint24[]",
        name: "",
        type: "uint24[]",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "balance",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "size",
            type: "int128",
          },
        ],
        internalType: "struct Order[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimArrear",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "native",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claimCommission",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "commission",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "donate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "arg",
        type: "bytes32",
      },
    ],
    name: "fill",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "balance",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "size",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "entryNotional",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "entrySocialLossIndex",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "entryFundingIndex",
            type: "int256",
          },
        ],
        internalType: "struct PositionCache",
        name: "pos",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "tip",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gate",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getArrear",
    outputs: [
      {
        components: [
          {
            internalType: "enum Phase",
            name: "phase",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "native",
            type: "bool",
          },
          {
            internalType: "uint128",
            name: "quantity",
            type: "uint128",
          },
        ],
        internalType: "struct Arrear",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getConfiguration",
    outputs: [
      {
        components: [
          {
            internalType: "enum Stage",
            name: "stage",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "quote",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "maxPair",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "maxRange",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "maxOrder",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "commissionRatio",
            type: "uint16",
          },
          {
            internalType: "uint128",
            name: "minQuoteAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "liveThreshold",
            type: "uint128",
          },
        ],
        internalType: "struct Configuration",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInvolvedPairs",
    outputs: [
      {
        internalType: "address[]",
        name: "instruments",
        type: "address[]",
      },
      {
        internalType: "uint32[]",
        name: "expiries",
        type: "uint32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPortfolioValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getStake",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "share",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "entryValue",
            type: "uint128",
          },
        ],
        internalType: "struct Stake",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "address",
        name: "_manager",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum Stage",
            name: "stage",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "quote",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "maxPair",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "maxRange",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "maxOrder",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "commissionRatio",
            type: "uint16",
          },
          {
            internalType: "uint128",
            name: "minQuoteAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "liveThreshold",
            type: "uint128",
          },
        ],
        internalType: "struct Configuration",
        name: "_configuration",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "share",
        type: "uint256",
      },
    ],
    name: "inquireWithdrawal",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "enum Phase",
        name: "phase",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "mtype",
        type: "string",
      },
      {
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes32[2]",
        name: "addArgs",
        type: "bytes32[2]",
      },
    ],
    name: "launch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "expiry",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "int256",
        name: "size",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "liquidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "manager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
    ],
    name: "markReady",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        internalType: "bytes32[2]",
        name: "args",
        type: "bytes32[2]",
      },
    ],
    name: "place",
    outputs: [
      {
        internalType: "uint24",
        name: "nonce",
        type: "uint24",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "balance",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "size",
            type: "int128",
          },
        ],
        internalType: "struct Order",
        name: "order",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        internalType: "bytes32[2]",
        name: "args",
        type: "bytes32[2]",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "newCommissionRatio",
        type: "uint16",
      },
    ],
    name: "setCommissionRatio",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "newLiveThreshold",
        type: "uint128",
      },
    ],
    name: "setLiveThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newManager",
        type: "address",
      },
    ],
    name: "setManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "newMinQuoteAmount",
        type: "uint128",
      },
    ],
    name: "setMinQuoteAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "newMaxPair",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "newMaxRange",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "newMaxOrder",
        type: "uint8",
      },
    ],
    name: "setPortfolioLimit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Stage",
        name: "newStage",
        type: "uint8",
      },
    ],
    name: "setStage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "expiry",
        type: "uint32",
      },
    ],
    name: "settle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instrument",
        type: "address",
      },
      {
        internalType: "bytes32[2]",
        name: "args",
        type: "bytes32[2]",
      },
    ],
    name: "trade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "native",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "share",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
    ],
    name: "withdrawFromGateAndRelease",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "AddLiquidityExceedMax",
    type: "error",
  },
  {
    inputs: [],
    name: "AddOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "BadAmmTiming",
    type: "error",
  },
  {
    inputs: [],
    name: "BadMaintenanceMarginRatio",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "totalSize",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "requestedSize",
        type: "int256",
      },
    ],
    name: "BadTargetSize",
    type: "error",
  },
  {
    inputs: [],
    name: "DivByZero",
    type: "error",
  },
  {
    inputs: [],
    name: "InvariantBroken",
    type: "error",
  },
  {
    inputs: [],
    name: "LiquidatePostImrUnsafe",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "noShortParty",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "socialLoss",
        type: "uint256",
      },
    ],
    name: "NoCounterparty",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderFull",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmount",
        type: "uint256",
      },
    ],
    name: "OrderImrUnsafe",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "requested",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "taken",
        type: "int256",
      },
    ],
    name: "OrderNotFullyTaken",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderOccupied",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderTickUnaligned",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderTooFar",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderTrivial",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderWrongSide",
    type: "error",
  },
  {
    inputs: [],
    name: "PositionBankrupt",
    type: "error",
  },
  {
    inputs: [],
    name: "PositionNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "RangeNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "ReuseNonEmptyRecord",
    type: "error",
  },
  {
    inputs: [],
    name: "RoundHalfUpBadParam",
    type: "error",
  },
  {
    inputs: [],
    name: "TargetSafe",
    type: "error",
  },
  {
    inputs: [],
    name: "TickOutOfBound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "GetErc20DecimalsFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "GetErc20NameFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "GetErc20SymbolFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "AddInvalidTickDelta",
    type: "error",
  },
  {
    inputs: [],
    name: "AddSlippage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minLiquidity",
        type: "uint256",
      },
    ],
    name: "AddTrivial",
    type: "error",
  },
  {
    inputs: [],
    name: "CrazySpot",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpiryBelowSettlingDuration",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpiryExceedMaxExpiryPeriod",
    type: "error",
  },
  {
    inputs: [],
    name: "RangeFull",
    type: "error",
  },
  {
    inputs: [],
    name: "RangeOccupied",
    type: "error",
  },
  {
    inputs: [],
    name: "RemoveActiveRange",
    type: "error",
  },
  {
    inputs: [],
    name: "RemoveSlippage",
    type: "error",
  },
  {
    inputs: [],
    name: "SqrtPX96OutOfBound",
    type: "error",
  },
  {
    inputs: [],
    name: "CrazyDeviation",
    type: "error",
  },
  {
    inputs: [],
    name: "DivUnderflow",
    type: "error",
  },
  {
    inputs: [],
    name: "MulOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "TradeImrUnsafe",
    type: "error",
  },
  {
    inputs: [],
    name: "TradeMmrUnsafe",
    type: "error",
  },
  {
    inputs: [],
    name: "TradeOutOfLiquidity",
    type: "error",
  },
  {
    inputs: [],
    name: "TradeSlippage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "stabilityFeeRatio",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "limitStabilityFeeRatio",
        type: "uint16",
      },
    ],
    name: "TradeStabilityFeeLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "TradeTrivial",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
] as const;

export class Vault__factory {
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
