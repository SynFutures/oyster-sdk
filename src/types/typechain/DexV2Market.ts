/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type DexV2FeederStruct = {
  ftype: PromiseOrValue<BigNumberish>;
  isToken0Quote: PromiseOrValue<boolean>;
  pair: PromiseOrValue<string>;
  scaler0: PromiseOrValue<BigNumberish>;
  scaler1: PromiseOrValue<BigNumberish>;
};

export type DexV2FeederStructOutput = [
  number,
  boolean,
  string,
  BigNumber,
  BigNumber
] & {
  ftype: number;
  isToken0Quote: boolean;
  pair: string;
  scaler0: BigNumber;
  scaler1: BigNumber;
};

export type DexV2AccStateStruct = {
  initTime: PromiseOrValue<BigNumberish>;
  initMark: PromiseOrValue<BigNumberish>;
  initAccumulation: PromiseOrValue<BigNumberish>;
};

export type DexV2AccStateStructOutput = [number, BigNumber, BigNumber] & {
  initTime: number;
  initMark: BigNumber;
  initAccumulation: BigNumber;
};

export type EmaParamStruct = {
  emaHalfTime: PromiseOrValue<BigNumberish>;
  maxTimeDelta: PromiseOrValue<BigNumberish>;
  maxRawTimeDelta: PromiseOrValue<BigNumberish>;
  maxChangeRatioPerSecond: PromiseOrValue<BigNumberish>;
};

export type EmaParamStructOutput = [number, number, number, number] & {
  emaHalfTime: number;
  maxTimeDelta: number;
  maxRawTimeDelta: number;
  maxChangeRatioPerSecond: number;
};

export type SpotStateStruct = {
  time: PromiseOrValue<BigNumberish>;
  spot: PromiseOrValue<BigNumberish>;
  raw: PromiseOrValue<BigNumberish>;
};

export type SpotStateStructOutput = [number, BigNumber, BigNumber] & {
  time: number;
  spot: BigNumber;
  raw: BigNumber;
};

export interface DexV2MarketInterface extends utils.Interface {
  functions: {
    "addDexV2Factory(address)": FunctionFragment;
    "clearStates(uint32)": FunctionFragment;
    "config()": FunctionFragment;
    "feeders(address)": FunctionFragment;
    "gate()": FunctionFragment;
    "getAccState(address,uint32)": FunctionFragment;
    "getAllInstruments()": FunctionFragment;
    "getBenchmarkPrice(address,uint32)": FunctionFragment;
    "getCompactEmaParam()": FunctionFragment;
    "getDexV2Factories()": FunctionFragment;
    "getEmaParam(address)": FunctionFragment;
    "getMarkPrice(address,uint32,uint8)": FunctionFragment;
    "getMarketType()": FunctionFragment;
    "getRawPrice(address)": FunctionFragment;
    "getSpotPrice(address)": FunctionFragment;
    "getSpotState(address)": FunctionFragment;
    "initialize(uint256,address[])": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "instruments(uint256)": FunctionFragment;
    "instrumentsLength()": FunctionFragment;
    "markPrice(uint32,uint8)": FunctionFragment;
    "prepareInstrument(address,bytes)": FunctionFragment;
    "setCompactEmaParam(uint256)": FunctionFragment;
    "syncEmaParam(uint8)": FunctionFragment;
    "updateFeeder(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDexV2Factory"
      | "clearStates"
      | "config"
      | "feeders"
      | "gate"
      | "getAccState"
      | "getAllInstruments"
      | "getBenchmarkPrice"
      | "getCompactEmaParam"
      | "getDexV2Factories"
      | "getEmaParam"
      | "getMarkPrice"
      | "getMarketType"
      | "getRawPrice"
      | "getSpotPrice"
      | "getSpotState"
      | "initialize(uint256,address[])"
      | "initialize(uint256)"
      | "instruments"
      | "instrumentsLength"
      | "markPrice"
      | "prepareInstrument"
      | "setCompactEmaParam"
      | "syncEmaParam"
      | "updateFeeder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDexV2Factory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearStates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccState",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllInstruments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBenchmarkPrice",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompactEmaParam",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDexV2Factories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmaParam",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRawPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotState",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(uint256,address[])",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "instruments",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "instrumentsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareInstrument",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompactEmaParam",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "syncEmaParam",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeder",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDexV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllInstruments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBenchmarkPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompactEmaParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexV2Factories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmaParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarkPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRawPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instruments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instrumentsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompactEmaParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncEmaParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeder",
    data: BytesLike
  ): Result;

  events: {
    "AddDexV2Factory(address,uint256)": EventFragment;
    "ClearStates(address,uint32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "SetCompactEmaParam(uint256)": EventFragment;
    "SetFeeder(address,tuple)": EventFragment;
    "UpdateAccState(address,uint32,tuple)": EventFragment;
    "UpdateEmaParam(address,tuple)": EventFragment;
    "UpdateSpotState(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddDexV2Factory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClearStates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCompactEmaParam"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAccState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEmaParam"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSpotState"): EventFragment;
}

export interface AddDexV2FactoryEventObject {
  factory: string;
  number: BigNumber;
}
export type AddDexV2FactoryEvent = TypedEvent<
  [string, BigNumber],
  AddDexV2FactoryEventObject
>;

export type AddDexV2FactoryEventFilter = TypedEventFilter<AddDexV2FactoryEvent>;

export interface ClearStatesEventObject {
  instrument: string;
  expiry: number;
}
export type ClearStatesEvent = TypedEvent<
  [string, number],
  ClearStatesEventObject
>;

export type ClearStatesEventFilter = TypedEventFilter<ClearStatesEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface SetCompactEmaParamEventObject {
  compactEmaParam: BigNumber;
}
export type SetCompactEmaParamEvent = TypedEvent<
  [BigNumber],
  SetCompactEmaParamEventObject
>;

export type SetCompactEmaParamEventFilter =
  TypedEventFilter<SetCompactEmaParamEvent>;

export interface SetFeederEventObject {
  instrument: string;
  feeder: DexV2FeederStructOutput;
}
export type SetFeederEvent = TypedEvent<
  [string, DexV2FeederStructOutput],
  SetFeederEventObject
>;

export type SetFeederEventFilter = TypedEventFilter<SetFeederEvent>;

export interface UpdateAccStateEventObject {
  instrument: string;
  expiry: number;
  accState: DexV2AccStateStructOutput;
}
export type UpdateAccStateEvent = TypedEvent<
  [string, number, DexV2AccStateStructOutput],
  UpdateAccStateEventObject
>;

export type UpdateAccStateEventFilter = TypedEventFilter<UpdateAccStateEvent>;

export interface UpdateEmaParamEventObject {
  instrument: string;
  emaParam: EmaParamStructOutput;
}
export type UpdateEmaParamEvent = TypedEvent<
  [string, EmaParamStructOutput],
  UpdateEmaParamEventObject
>;

export type UpdateEmaParamEventFilter = TypedEventFilter<UpdateEmaParamEvent>;

export interface UpdateSpotStateEventObject {
  instrument: string;
  spotState: SpotStateStructOutput;
}
export type UpdateSpotStateEvent = TypedEvent<
  [string, SpotStateStructOutput],
  UpdateSpotStateEventObject
>;

export type UpdateSpotStateEventFilter = TypedEventFilter<UpdateSpotStateEvent>;

export interface DexV2Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DexV2MarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDexV2Factory(
      dexV2Factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearStates(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    config(overrides?: CallOverrides): Promise<[string]>;

    feeders(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, string, BigNumber, BigNumber] & {
        ftype: number;
        isToken0Quote: boolean;
        pair: string;
        scaler0: BigNumber;
        scaler1: BigNumber;
      }
    >;

    gate(overrides?: CallOverrides): Promise<[string]>;

    getAccState(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DexV2AccStateStructOutput]>;

    getAllInstruments(overrides?: CallOverrides): Promise<[string[]]>;

    getBenchmarkPrice(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { benchmark: BigNumber }>;

    getCompactEmaParam(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDexV2Factories(overrides?: CallOverrides): Promise<[string[]]>;

    getEmaParam(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[EmaParamStructOutput]>;

    getMarkPrice(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mark: BigNumber }>;

    getMarketType(overrides?: CallOverrides): Promise<[string]>;

    getRawPrice(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { raw: BigNumber }>;

    getSpotPrice(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { spot: BigNumber }>;

    getSpotState(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SpotStateStructOutput]>;

    "initialize(uint256,address[])"(
      _emaParam: PromiseOrValue<BigNumberish>,
      _factories: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(uint256)"(
      _compactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    instruments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    instrumentsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    markPrice(
      expiry: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    prepareInstrument(
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCompactEmaParam(
      newCompactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncEmaParam(
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFeeder(
      instrument: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addDexV2Factory(
    dexV2Factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearStates(
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  config(overrides?: CallOverrides): Promise<string>;

  feeders(
    instrument: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, string, BigNumber, BigNumber] & {
      ftype: number;
      isToken0Quote: boolean;
      pair: string;
      scaler0: BigNumber;
      scaler1: BigNumber;
    }
  >;

  gate(overrides?: CallOverrides): Promise<string>;

  getAccState(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DexV2AccStateStructOutput>;

  getAllInstruments(overrides?: CallOverrides): Promise<string[]>;

  getBenchmarkPrice(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCompactEmaParam(overrides?: CallOverrides): Promise<BigNumber>;

  getDexV2Factories(overrides?: CallOverrides): Promise<string[]>;

  getEmaParam(
    instrument: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<EmaParamStructOutput>;

  getMarkPrice(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketType(overrides?: CallOverrides): Promise<string>;

  getRawPrice(
    instrument: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSpotPrice(
    instrument: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSpotState(
    instrument: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SpotStateStructOutput>;

  "initialize(uint256,address[])"(
    _emaParam: PromiseOrValue<BigNumberish>,
    _factories: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(uint256)"(
    _compactEmaParam: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  instruments(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  instrumentsLength(overrides?: CallOverrides): Promise<BigNumber>;

  markPrice(
    expiry: PromiseOrValue<BigNumberish>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  prepareInstrument(
    instrument: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCompactEmaParam(
    newCompactEmaParam: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncEmaParam(
    leverage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFeeder(
    instrument: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDexV2Factory(
      dexV2Factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    clearStates(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    config(overrides?: CallOverrides): Promise<string>;

    feeders(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, string, BigNumber, BigNumber] & {
        ftype: number;
        isToken0Quote: boolean;
        pair: string;
        scaler0: BigNumber;
        scaler1: BigNumber;
      }
    >;

    gate(overrides?: CallOverrides): Promise<string>;

    getAccState(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DexV2AccStateStructOutput>;

    getAllInstruments(overrides?: CallOverrides): Promise<string[]>;

    getBenchmarkPrice(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompactEmaParam(overrides?: CallOverrides): Promise<BigNumber>;

    getDexV2Factories(overrides?: CallOverrides): Promise<string[]>;

    getEmaParam(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<EmaParamStructOutput>;

    getMarkPrice(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketType(overrides?: CallOverrides): Promise<string>;

    getRawPrice(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPrice(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotState(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SpotStateStructOutput>;

    "initialize(uint256,address[])"(
      _emaParam: PromiseOrValue<BigNumberish>,
      _factories: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256)"(
      _compactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    instruments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    instrumentsLength(overrides?: CallOverrides): Promise<BigNumber>;

    markPrice(
      expiry: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareInstrument(
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        index: string;
        base: string;
        initData: string;
      }
    >;

    setCompactEmaParam(
      newCompactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    syncEmaParam(
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeder(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddDexV2Factory(address,uint256)"(
      factory?: null,
      number?: null
    ): AddDexV2FactoryEventFilter;
    AddDexV2Factory(factory?: null, number?: null): AddDexV2FactoryEventFilter;

    "ClearStates(address,uint32)"(
      instrument?: PromiseOrValue<string> | null,
      expiry?: null
    ): ClearStatesEventFilter;
    ClearStates(
      instrument?: PromiseOrValue<string> | null,
      expiry?: null
    ): ClearStatesEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "SetCompactEmaParam(uint256)"(
      compactEmaParam?: null
    ): SetCompactEmaParamEventFilter;
    SetCompactEmaParam(compactEmaParam?: null): SetCompactEmaParamEventFilter;

    "SetFeeder(address,tuple)"(
      instrument?: PromiseOrValue<string> | null,
      feeder?: null
    ): SetFeederEventFilter;
    SetFeeder(
      instrument?: PromiseOrValue<string> | null,
      feeder?: null
    ): SetFeederEventFilter;

    "UpdateAccState(address,uint32,tuple)"(
      instrument?: PromiseOrValue<string> | null,
      expiry?: null,
      accState?: null
    ): UpdateAccStateEventFilter;
    UpdateAccState(
      instrument?: PromiseOrValue<string> | null,
      expiry?: null,
      accState?: null
    ): UpdateAccStateEventFilter;

    "UpdateEmaParam(address,tuple)"(
      instrument?: PromiseOrValue<string> | null,
      emaParam?: null
    ): UpdateEmaParamEventFilter;
    UpdateEmaParam(
      instrument?: PromiseOrValue<string> | null,
      emaParam?: null
    ): UpdateEmaParamEventFilter;

    "UpdateSpotState(address,tuple)"(
      instrument?: PromiseOrValue<string> | null,
      spotState?: null
    ): UpdateSpotStateEventFilter;
    UpdateSpotState(
      instrument?: PromiseOrValue<string> | null,
      spotState?: null
    ): UpdateSpotStateEventFilter;
  };

  estimateGas: {
    addDexV2Factory(
      dexV2Factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearStates(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    feeders(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gate(overrides?: CallOverrides): Promise<BigNumber>;

    getAccState(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllInstruments(overrides?: CallOverrides): Promise<BigNumber>;

    getBenchmarkPrice(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompactEmaParam(overrides?: CallOverrides): Promise<BigNumber>;

    getDexV2Factories(overrides?: CallOverrides): Promise<BigNumber>;

    getEmaParam(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkPrice(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketType(overrides?: CallOverrides): Promise<BigNumber>;

    getRawPrice(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPrice(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotState(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize(uint256,address[])"(
      _emaParam: PromiseOrValue<BigNumberish>,
      _factories: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(uint256)"(
      _compactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    instruments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instrumentsLength(overrides?: CallOverrides): Promise<BigNumber>;

    markPrice(
      expiry: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    prepareInstrument(
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCompactEmaParam(
      newCompactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncEmaParam(
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFeeder(
      instrument: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDexV2Factory(
      dexV2Factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearStates(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeders(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccState(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllInstruments(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBenchmarkPrice(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompactEmaParam(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDexV2Factories(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEmaParam(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarkPrice(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRawPrice(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotState(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,address[])"(
      _emaParam: PromiseOrValue<BigNumberish>,
      _factories: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(uint256)"(
      _compactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    instruments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instrumentsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markPrice(
      expiry: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    prepareInstrument(
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCompactEmaParam(
      newCompactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncEmaParam(
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeder(
      instrument: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
