/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ConfigurationStruct = {
  stage: PromiseOrValue<BigNumberish>;
  quote: PromiseOrValue<string>;
  decimals: PromiseOrValue<BigNumberish>;
  maxPair: PromiseOrValue<BigNumberish>;
  maxRange: PromiseOrValue<BigNumberish>;
  maxOrder: PromiseOrValue<BigNumberish>;
  commissionRatio: PromiseOrValue<BigNumberish>;
  minQuoteAmount: PromiseOrValue<BigNumberish>;
  liveThreshold: PromiseOrValue<BigNumberish>;
};

export type ConfigurationStructOutput = [
  number,
  string,
  number,
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber
] & {
  stage: number;
  quote: string;
  decimals: number;
  maxPair: number;
  maxRange: number;
  maxOrder: number;
  commissionRatio: number;
  minQuoteAmount: BigNumber;
  liveThreshold: BigNumber;
};

export type ArrearStruct = {
  phase: PromiseOrValue<BigNumberish>;
  native: PromiseOrValue<boolean>;
  quantity: PromiseOrValue<BigNumberish>;
};

export type ArrearStructOutput = [number, boolean, BigNumber] & {
  phase: number;
  native: boolean;
  quantity: BigNumber;
};

export type StakeStruct = {
  share: PromiseOrValue<BigNumberish>;
  entryValue: PromiseOrValue<BigNumberish>;
};

export type StakeStructOutput = [BigNumber, BigNumber] & {
  share: BigNumber;
  entryValue: BigNumber;
};

export type RangeStruct = {
  liquidity: PromiseOrValue<BigNumberish>;
  entryFeeIndex: PromiseOrValue<BigNumberish>;
  balance: PromiseOrValue<BigNumberish>;
  sqrtEntryPX96: PromiseOrValue<BigNumberish>;
};

export type RangeStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  liquidity: BigNumber;
  entryFeeIndex: BigNumber;
  balance: BigNumber;
  sqrtEntryPX96: BigNumber;
};

export type OrderStruct = {
  balance: PromiseOrValue<BigNumberish>;
  size: PromiseOrValue<BigNumberish>;
};

export type OrderStructOutput = [BigNumber, BigNumber] & {
  balance: BigNumber;
  size: BigNumber;
};

export type PositionCacheStruct = {
  balance: PromiseOrValue<BigNumberish>;
  size: PromiseOrValue<BigNumberish>;
  entryNotional: PromiseOrValue<BigNumberish>;
  entrySocialLossIndex: PromiseOrValue<BigNumberish>;
  entryFundingIndex: PromiseOrValue<BigNumberish>;
};

export type PositionCacheStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  balance: BigNumber;
  size: BigNumber;
  entryNotional: BigNumber;
  entrySocialLossIndex: BigNumber;
  entryFundingIndex: BigNumber;
};

export interface VaultInterface extends utils.Interface {
  functions: {
    "RATIO_BASE()": FunctionFragment;
    "add(address,bytes32[2])": FunctionFragment;
    "batchCancel(address,uint32,uint240[3])": FunctionFragment;
    "batchPlace(address,bytes32[3])": FunctionFragment;
    "claimArrear()": FunctionFragment;
    "claimCommission(bool,uint256)": FunctionFragment;
    "commission()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "donate(uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "fill(address,bytes32)": FunctionFragment;
    "gate()": FunctionFragment;
    "getArrear(address)": FunctionFragment;
    "getConfiguration()": FunctionFragment;
    "getInvolvedPairs()": FunctionFragment;
    "getPortfolioValue()": FunctionFragment;
    "getStake(address)": FunctionFragment;
    "initialize(address,string,address,(uint8,address,uint8,uint8,uint8,uint8,uint16,uint128,uint128))": FunctionFragment;
    "inquireWithdrawal(address,uint256)": FunctionFragment;
    "launch(string,address,bytes,bytes32[2])": FunctionFragment;
    "liquidate(address,uint32,address,int256,uint256)": FunctionFragment;
    "manager()": FunctionFragment;
    "markReady(address[])": FunctionFragment;
    "name()": FunctionFragment;
    "place(address,bytes32[2])": FunctionFragment;
    "remove(address,bytes32[2])": FunctionFragment;
    "setCommissionRatio(uint16)": FunctionFragment;
    "setLiveThreshold(uint128)": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "setMinQuoteAmount(uint128)": FunctionFragment;
    "setPortfolioLimit(uint8,uint8,uint8)": FunctionFragment;
    "setStage(uint8)": FunctionFragment;
    "settle(address,uint32)": FunctionFragment;
    "totalShare()": FunctionFragment;
    "trade(address,bytes32[2])": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(bool,uint256)": FunctionFragment;
    "withdrawFromGateAndRelease(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RATIO_BASE"
      | "add"
      | "batchCancel"
      | "batchPlace"
      | "claimArrear"
      | "claimCommission"
      | "commission"
      | "deposit"
      | "donate"
      | "factory"
      | "fill"
      | "gate"
      | "getArrear"
      | "getConfiguration"
      | "getInvolvedPairs"
      | "getPortfolioValue"
      | "getStake"
      | "initialize"
      | "inquireWithdrawal"
      | "launch"
      | "liquidate"
      | "manager"
      | "markReady"
      | "name"
      | "place"
      | "remove"
      | "setCommissionRatio"
      | "setLiveThreshold"
      | "setManager"
      | "setMinQuoteAmount"
      | "setPortfolioLimit"
      | "setStage"
      | "settle"
      | "totalShare"
      | "trade"
      | "weth"
      | "withdraw"
      | "withdrawFromGateAndRelease"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RATIO_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchPlace",
    values: [
      PromiseOrValue<string>,
      [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimArrear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCommission",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "commission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fill",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "gate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getArrear",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvolvedPairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPortfolioValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      ConfigurationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "inquireWithdrawal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "launch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "markReady",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "place",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiveThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinQuoteAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPortfolioLimit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromGateAndRelease",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(functionFragment: "RATIO_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchPlace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimArrear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commission", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getArrear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvolvedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPortfolioValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inquireWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "launch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markReady", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "place", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiveThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinQuoteAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPortfolioLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromGateAndRelease",
    data: BytesLike
  ): Result;

  events: {
    "AddInvolvedPair(address,uint32)": EventFragment;
    "Deposit(address,bool,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RemoveInvolvedPair(address,uint32)": EventFragment;
    "SetConfiguration(tuple)": EventFragment;
    "SetManager(address,address)": EventFragment;
    "UpdateArrear(address,tuple)": EventFragment;
    "UpdateCommision(uint128)": EventFragment;
    "UpdateStake(address,tuple,uint256)": EventFragment;
    "Withdraw(address,bool,uint256)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddInvolvedPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveInvolvedPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetConfiguration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateArrear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCommision"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AddInvolvedPairEventObject {
  instrument: string;
  expiry: number;
}
export type AddInvolvedPairEvent = TypedEvent<
  [string, number],
  AddInvolvedPairEventObject
>;

export type AddInvolvedPairEventFilter = TypedEventFilter<AddInvolvedPairEvent>;

export interface DepositEventObject {
  user: string;
  native: boolean;
  quantity: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, boolean, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RemoveInvolvedPairEventObject {
  instrument: string;
  expiry: number;
}
export type RemoveInvolvedPairEvent = TypedEvent<
  [string, number],
  RemoveInvolvedPairEventObject
>;

export type RemoveInvolvedPairEventFilter =
  TypedEventFilter<RemoveInvolvedPairEvent>;

export interface SetConfigurationEventObject {
  config: ConfigurationStructOutput;
}
export type SetConfigurationEvent = TypedEvent<
  [ConfigurationStructOutput],
  SetConfigurationEventObject
>;

export type SetConfigurationEventFilter =
  TypedEventFilter<SetConfigurationEvent>;

export interface SetManagerEventObject {
  newManager: string;
  oldManager: string;
}
export type SetManagerEvent = TypedEvent<
  [string, string],
  SetManagerEventObject
>;

export type SetManagerEventFilter = TypedEventFilter<SetManagerEvent>;

export interface UpdateArrearEventObject {
  user: string;
  arrear: ArrearStructOutput;
}
export type UpdateArrearEvent = TypedEvent<
  [string, ArrearStructOutput],
  UpdateArrearEventObject
>;

export type UpdateArrearEventFilter = TypedEventFilter<UpdateArrearEvent>;

export interface UpdateCommisionEventObject {
  commission: BigNumber;
}
export type UpdateCommisionEvent = TypedEvent<
  [BigNumber],
  UpdateCommisionEventObject
>;

export type UpdateCommisionEventFilter = TypedEventFilter<UpdateCommisionEvent>;

export interface UpdateStakeEventObject {
  user: string;
  stake: StakeStructOutput;
  totalShare: BigNumber;
}
export type UpdateStakeEvent = TypedEvent<
  [string, StakeStructOutput, BigNumber],
  UpdateStakeEventObject
>;

export type UpdateStakeEventFilter = TypedEventFilter<UpdateStakeEvent>;

export interface WithdrawEventObject {
  user: string;
  native: boolean;
  quantity: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, boolean, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RATIO_BASE(overrides?: CallOverrides): Promise<[number]>;

    add(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchCancel(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      encodedTicks: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchPlace(
      instrument: PromiseOrValue<string>,
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimArrear(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCommission(
      native: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commission(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donate(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fill(
      instrument: PromiseOrValue<string>,
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gate(overrides?: CallOverrides): Promise<[string]>;

    getArrear(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ArrearStructOutput]>;

    getConfiguration(
      overrides?: CallOverrides
    ): Promise<[ConfigurationStructOutput]>;

    getInvolvedPairs(
      overrides?: CallOverrides
    ): Promise<
      [string[], number[]] & { instruments: string[]; expiries: number[] }
    >;

    getPortfolioValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStake(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[StakeStructOutput]>;

    initialize(
      _factory: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      _configuration: ConfigurationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    inquireWithdrawal(
      user: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { value: BigNumber; phase: number }>;

    launch(
      mtype: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      addArgs: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    markReady(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    place(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCommissionRatio(
      newCommissionRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiveThreshold(
      newLiveThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinQuoteAmount(
      newMinQuoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPortfolioLimit(
      newMaxPair: PromiseOrValue<BigNumberish>,
      newMaxRange: PromiseOrValue<BigNumberish>,
      newMaxOrder: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStage(
      newStage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    trade(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      native: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromGateAndRelease(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  RATIO_BASE(overrides?: CallOverrides): Promise<number>;

  add(
    instrument: PromiseOrValue<string>,
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchCancel(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    encodedTicks: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchPlace(
    instrument: PromiseOrValue<string>,
    args: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimArrear(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCommission(
    native: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commission(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donate(
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  fill(
    instrument: PromiseOrValue<string>,
    arg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gate(overrides?: CallOverrides): Promise<string>;

  getArrear(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ArrearStructOutput>;

  getConfiguration(
    overrides?: CallOverrides
  ): Promise<ConfigurationStructOutput>;

  getInvolvedPairs(
    overrides?: CallOverrides
  ): Promise<
    [string[], number[]] & { instruments: string[]; expiries: number[] }
  >;

  getPortfolioValue(overrides?: CallOverrides): Promise<BigNumber>;

  getStake(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<StakeStructOutput>;

  initialize(
    _factory: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _manager: PromiseOrValue<string>,
    _configuration: ConfigurationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  inquireWithdrawal(
    user: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { value: BigNumber; phase: number }>;

  launch(
    mtype: PromiseOrValue<string>,
    instrument: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    addArgs: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    size: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  markReady(
    users: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  place(
    instrument: PromiseOrValue<string>,
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove(
    instrument: PromiseOrValue<string>,
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCommissionRatio(
    newCommissionRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiveThreshold(
    newLiveThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManager(
    newManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinQuoteAmount(
    newMinQuoteAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPortfolioLimit(
    newMaxPair: PromiseOrValue<BigNumberish>,
    newMaxRange: PromiseOrValue<BigNumberish>,
    newMaxOrder: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStage(
    newStage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalShare(overrides?: CallOverrides): Promise<BigNumber>;

  trade(
    instrument: PromiseOrValue<string>,
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    native: PromiseOrValue<boolean>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromGateAndRelease(
    users: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RATIO_BASE(overrides?: CallOverrides): Promise<number>;

    add(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<
      [number, number, RangeStructOutput] & {
        tickLower: number;
        tickUpper: number;
        range: RangeStructOutput;
      }
    >;

    batchCancel(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      encodedTicks: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    batchPlace(
      instrument: PromiseOrValue<string>,
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: CallOverrides
    ): Promise<[number[], OrderStructOutput[]]>;

    claimArrear(overrides?: CallOverrides): Promise<void>;

    claimCommission(
      native: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    commission(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    donate(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    fill(
      instrument: PromiseOrValue<string>,
      arg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PositionCacheStructOutput, BigNumber] & {
        pos: PositionCacheStructOutput;
        tip: BigNumber;
      }
    >;

    gate(overrides?: CallOverrides): Promise<string>;

    getArrear(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ArrearStructOutput>;

    getConfiguration(
      overrides?: CallOverrides
    ): Promise<ConfigurationStructOutput>;

    getInvolvedPairs(
      overrides?: CallOverrides
    ): Promise<
      [string[], number[]] & { instruments: string[]; expiries: number[] }
    >;

    getPortfolioValue(overrides?: CallOverrides): Promise<BigNumber>;

    getStake(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<StakeStructOutput>;

    initialize(
      _factory: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      _configuration: ConfigurationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    inquireWithdrawal(
      user: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { value: BigNumber; phase: number }>;

    launch(
      mtype: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      addArgs: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    markReady(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    place(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<
      [number, OrderStructOutput] & { nonce: number; order: OrderStructOutput }
    >;

    remove(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<void>;

    setCommissionRatio(
      newCommissionRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiveThreshold(
      newLiveThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(
      newManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinQuoteAmount(
      newMinQuoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPortfolioLimit(
      newMaxPair: PromiseOrValue<BigNumberish>,
      newMaxRange: PromiseOrValue<BigNumberish>,
      newMaxOrder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStage(
      newStage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    trade(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      native: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromGateAndRelease(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddInvolvedPair(address,uint32)"(
      instrument?: null,
      expiry?: null
    ): AddInvolvedPairEventFilter;
    AddInvolvedPair(
      instrument?: null,
      expiry?: null
    ): AddInvolvedPairEventFilter;

    "Deposit(address,bool,uint256)"(
      user?: PromiseOrValue<string> | null,
      native?: null,
      quantity?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      native?: null,
      quantity?: null
    ): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RemoveInvolvedPair(address,uint32)"(
      instrument?: null,
      expiry?: null
    ): RemoveInvolvedPairEventFilter;
    RemoveInvolvedPair(
      instrument?: null,
      expiry?: null
    ): RemoveInvolvedPairEventFilter;

    "SetConfiguration(tuple)"(config?: null): SetConfigurationEventFilter;
    SetConfiguration(config?: null): SetConfigurationEventFilter;

    "SetManager(address,address)"(
      newManager?: PromiseOrValue<string> | null,
      oldManager?: null
    ): SetManagerEventFilter;
    SetManager(
      newManager?: PromiseOrValue<string> | null,
      oldManager?: null
    ): SetManagerEventFilter;

    "UpdateArrear(address,tuple)"(
      user?: PromiseOrValue<string> | null,
      arrear?: null
    ): UpdateArrearEventFilter;
    UpdateArrear(
      user?: PromiseOrValue<string> | null,
      arrear?: null
    ): UpdateArrearEventFilter;

    "UpdateCommision(uint128)"(commission?: null): UpdateCommisionEventFilter;
    UpdateCommision(commission?: null): UpdateCommisionEventFilter;

    "UpdateStake(address,tuple,uint256)"(
      user?: PromiseOrValue<string> | null,
      stake?: null,
      totalShare?: null
    ): UpdateStakeEventFilter;
    UpdateStake(
      user?: PromiseOrValue<string> | null,
      stake?: null,
      totalShare?: null
    ): UpdateStakeEventFilter;

    "Withdraw(address,bool,uint256)"(
      user?: PromiseOrValue<string> | null,
      native?: null,
      quantity?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      native?: null,
      quantity?: null
    ): WithdrawEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    RATIO_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchCancel(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      encodedTicks: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchPlace(
      instrument: PromiseOrValue<string>,
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimArrear(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCommission(
      native: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commission(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donate(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fill(
      instrument: PromiseOrValue<string>,
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gate(overrides?: CallOverrides): Promise<BigNumber>;

    getArrear(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getInvolvedPairs(overrides?: CallOverrides): Promise<BigNumber>;

    getPortfolioValue(overrides?: CallOverrides): Promise<BigNumber>;

    getStake(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _factory: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      _configuration: ConfigurationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    inquireWithdrawal(
      user: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launch(
      mtype: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      addArgs: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidate(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    markReady(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    place(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCommissionRatio(
      newCommissionRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiveThreshold(
      newLiveThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinQuoteAmount(
      newMinQuoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPortfolioLimit(
      newMaxPair: PromiseOrValue<BigNumberish>,
      newMaxRange: PromiseOrValue<BigNumberish>,
      newMaxOrder: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStage(
      newStage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    trade(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      native: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromGateAndRelease(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RATIO_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchCancel(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      encodedTicks: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchPlace(
      instrument: PromiseOrValue<string>,
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimArrear(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCommission(
      native: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fill(
      instrument: PromiseOrValue<string>,
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getArrear(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfiguration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInvolvedPairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPortfolioValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStake(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _factory: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      _configuration: ConfigurationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    inquireWithdrawal(
      user: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launch(
      mtype: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      addArgs: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markReady(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    place(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCommissionRatio(
      newCommissionRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiveThreshold(
      newLiveThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinQuoteAmount(
      newMinQuoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPortfolioLimit(
      newMaxPair: PromiseOrValue<BigNumberish>,
      newMaxRange: PromiseOrValue<BigNumberish>,
      newMaxOrder: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStage(
      newStage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trade(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      native: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromGateAndRelease(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
