/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type PendingWithdrawStruct = {
  status: PromiseOrValue<BigNumberish>;
  native: PromiseOrValue<boolean>;
  quantity: PromiseOrValue<BigNumberish>;
};

export type PendingWithdrawStructOutput = [number, boolean, BigNumber] & {
  status: number;
  native: boolean;
  quantity: BigNumber;
};

export type ShareInfoStruct = {
  shares: PromiseOrValue<BigNumberish>;
  entryValue: PromiseOrValue<BigNumberish>;
};

export type ShareInfoStructOutput = [BigNumber, BigNumber] & {
  shares: BigNumber;
  entryValue: BigNumber;
};

export type RangeStruct = {
  liquidity: PromiseOrValue<BigNumberish>;
  entryFeeIndex: PromiseOrValue<BigNumberish>;
  balance: PromiseOrValue<BigNumberish>;
  sqrtEntryPX96: PromiseOrValue<BigNumberish>;
};

export type RangeStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  liquidity: BigNumber;
  entryFeeIndex: BigNumber;
  balance: BigNumber;
  sqrtEntryPX96: BigNumber;
};

export type OrderStruct = {
  balance: PromiseOrValue<BigNumberish>;
  size: PromiseOrValue<BigNumberish>;
};

export type OrderStructOutput = [BigNumber, BigNumber] & {
  balance: BigNumber;
  size: BigNumber;
};

export type PositionCacheStruct = {
  balance: PromiseOrValue<BigNumberish>;
  size: PromiseOrValue<BigNumberish>;
  entryNotional: PromiseOrValue<BigNumberish>;
  entrySocialLossIndex: PromiseOrValue<BigNumberish>;
  entryFundingIndex: PromiseOrValue<BigNumberish>;
};

export type PositionCacheStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  balance: BigNumber;
  size: BigNumber;
  entryNotional: BigNumber;
  entrySocialLossIndex: BigNumber;
  entryFundingIndex: BigNumber;
};

export interface VaultInterface extends utils.Interface {
  functions: {
    "EMERGENCY_RATIO()": FunctionFragment;
    "RATIO_BASE()": FunctionFragment;
    "add(address,bytes32[2])": FunctionFragment;
    "admin()": FunctionFragment;
    "batchCancel(bytes32,uint240[3])": FunctionFragment;
    "batchPlace(address,bytes32[3])": FunctionFragment;
    "cancelPendingWithdraw()": FunctionFragment;
    "claimFee(bytes32)": FunctionFragment;
    "claimPendingWithdraw()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "fill(address,bytes32)": FunctionFragment;
    "gate()": FunctionFragment;
    "getInvolvedPairs()": FunctionFragment;
    "getTotalValue()": FunctionFragment;
    "initialize(address,address,address,uint256,uint8,uint8,uint8)": FunctionFragment;
    "launch(address,string,address,bytes,bytes32[2])": FunctionFragment;
    "liquidate(bytes32[3])": FunctionFragment;
    "liveThreshold()": FunctionFragment;
    "markReady(address[])": FunctionFragment;
    "maxOrderNumber()": FunctionFragment;
    "maxPairNumber()": FunctionFragment;
    "maxRangeNumber()": FunctionFragment;
    "mode()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingsOf(address)": FunctionFragment;
    "place(address,bytes32[2])": FunctionFragment;
    "profitFeeRatio()": FunctionFragment;
    "quote()": FunctionFragment;
    "remove(address,bytes32[2])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLiveThreshold(uint256)": FunctionFragment;
    "setPairConfig(uint8,uint8,uint8)": FunctionFragment;
    "setProfitFeeRatio(uint32)": FunctionFragment;
    "setVaultStatus(uint8)": FunctionFragment;
    "settle(bytes32)": FunctionFragment;
    "sharesInfoOf(address)": FunctionFragment;
    "status()": FunctionFragment;
    "sweep(bytes32,address,int256)": FunctionFragment;
    "switchOperationMode()": FunctionFragment;
    "totalFee()": FunctionFragment;
    "totalPendingShares()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "trade(address,bytes32[2])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(bytes32)": FunctionFragment;
    "withdrawFromGateAndRelease(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EMERGENCY_RATIO"
      | "RATIO_BASE"
      | "add"
      | "admin"
      | "batchCancel"
      | "batchPlace"
      | "cancelPendingWithdraw"
      | "claimFee"
      | "claimPendingWithdraw"
      | "decimals"
      | "deposit"
      | "fill"
      | "gate"
      | "getInvolvedPairs"
      | "getTotalValue"
      | "initialize"
      | "launch"
      | "liquidate"
      | "liveThreshold"
      | "markReady"
      | "maxOrderNumber"
      | "maxPairNumber"
      | "maxRangeNumber"
      | "mode"
      | "multicall"
      | "owner"
      | "pendingsOf"
      | "place"
      | "profitFeeRatio"
      | "quote"
      | "remove"
      | "renounceOwnership"
      | "setLiveThreshold"
      | "setPairConfig"
      | "setProfitFeeRatio"
      | "setVaultStatus"
      | "settle"
      | "sharesInfoOf"
      | "status"
      | "sweep"
      | "switchOperationMode"
      | "totalFee"
      | "totalPendingShares"
      | "totalShares"
      | "trade"
      | "transferOwnership"
      | "weth"
      | "withdraw"
      | "withdrawFromGateAndRelease"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EMERGENCY_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RATIO_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchCancel",
    values: [
      PromiseOrValue<BytesLike>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchPlace",
    values: [
      PromiseOrValue<string>,
      [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPendingWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimFee",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPendingWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fill",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "gate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInvolvedPairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "launch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liveThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markReady",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "maxOrderNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPairNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRangeNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "place",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "profitFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "quote", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLiveThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitFeeRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesInfoOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "switchOperationMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPendingShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromGateAndRelease",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "EMERGENCY_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RATIO_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchPlace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelPendingWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPendingWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInvolvedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "launch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liveThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markReady", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxOrderNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPairNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRangeNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingsOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "place", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "profitFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiveThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfitFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharesInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "switchOperationMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPendingShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromGateAndRelease",
    data: BytesLike
  ): Result;

  events: {
    "AddInvolvedPair(address,uint32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveInvolvedPair(address,uint32)": EventFragment;
    "SetLiveThreshold(uint256)": EventFragment;
    "SetPairConfig(uint8,uint8,uint8)": EventFragment;
    "SetProfitFeeRatio(uint32)": EventFragment;
    "SetVaultStatus(uint8)": EventFragment;
    "SwitchOperationMode(uint8)": EventFragment;
    "UpdatePending(address,tuple,uint256)": EventFragment;
    "UpdateShareInfo(address,tuple,uint128,int256)": EventFragment;
    "UpdateTotalFee(uint128)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddInvolvedPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveInvolvedPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiveThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPairConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProfitFeeRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVaultStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwitchOperationMode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePending"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateShareInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTotalFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AddInvolvedPairEventObject {
  instrument: string;
  expiry: number;
}
export type AddInvolvedPairEvent = TypedEvent<
  [string, number],
  AddInvolvedPairEventObject
>;

export type AddInvolvedPairEventFilter = TypedEventFilter<AddInvolvedPairEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveInvolvedPairEventObject {
  instrument: string;
  expiry: number;
}
export type RemoveInvolvedPairEvent = TypedEvent<
  [string, number],
  RemoveInvolvedPairEventObject
>;

export type RemoveInvolvedPairEventFilter =
  TypedEventFilter<RemoveInvolvedPairEvent>;

export interface SetLiveThresholdEventObject {
  quoteAmount: BigNumber;
}
export type SetLiveThresholdEvent = TypedEvent<
  [BigNumber],
  SetLiveThresholdEventObject
>;

export type SetLiveThresholdEventFilter =
  TypedEventFilter<SetLiveThresholdEvent>;

export interface SetPairConfigEventObject {
  maxRangeNumber: number;
  maxOrderNumber: number;
  maxPairNumber: number;
}
export type SetPairConfigEvent = TypedEvent<
  [number, number, number],
  SetPairConfigEventObject
>;

export type SetPairConfigEventFilter = TypedEventFilter<SetPairConfigEvent>;

export interface SetProfitFeeRatioEventObject {
  newProfitFeeRatio: number;
}
export type SetProfitFeeRatioEvent = TypedEvent<
  [number],
  SetProfitFeeRatioEventObject
>;

export type SetProfitFeeRatioEventFilter =
  TypedEventFilter<SetProfitFeeRatioEvent>;

export interface SetVaultStatusEventObject {
  status: number;
}
export type SetVaultStatusEvent = TypedEvent<
  [number],
  SetVaultStatusEventObject
>;

export type SetVaultStatusEventFilter = TypedEventFilter<SetVaultStatusEvent>;

export interface SwitchOperationModeEventObject {
  mode: number;
}
export type SwitchOperationModeEvent = TypedEvent<
  [number],
  SwitchOperationModeEventObject
>;

export type SwitchOperationModeEventFilter =
  TypedEventFilter<SwitchOperationModeEvent>;

export interface UpdatePendingEventObject {
  user: string;
  pending: PendingWithdrawStructOutput;
  totalPendingShares: BigNumber;
}
export type UpdatePendingEvent = TypedEvent<
  [string, PendingWithdrawStructOutput, BigNumber],
  UpdatePendingEventObject
>;

export type UpdatePendingEventFilter = TypedEventFilter<UpdatePendingEvent>;

export interface UpdateShareInfoEventObject {
  user: string;
  info: ShareInfoStructOutput;
  totalShares: BigNumber;
  quantity: BigNumber;
}
export type UpdateShareInfoEvent = TypedEvent<
  [string, ShareInfoStructOutput, BigNumber, BigNumber],
  UpdateShareInfoEventObject
>;

export type UpdateShareInfoEventFilter = TypedEventFilter<UpdateShareInfoEvent>;

export interface UpdateTotalFeeEventObject {
  totalFee: BigNumber;
}
export type UpdateTotalFeeEvent = TypedEvent<
  [BigNumber],
  UpdateTotalFeeEventObject
>;

export type UpdateTotalFeeEventFilter = TypedEventFilter<UpdateTotalFeeEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EMERGENCY_RATIO(overrides?: CallOverrides): Promise<[number]>;

    RATIO_BASE(overrides?: CallOverrides): Promise<[number]>;

    add(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    batchCancel(
      arg: PromiseOrValue<BytesLike>,
      encodedTicks: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchPlace(
      instrument: PromiseOrValue<string>,
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelPendingWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFee(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimPendingWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fill(
      instrument: PromiseOrValue<string>,
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gate(overrides?: CallOverrides): Promise<[string]>;

    getInvolvedPairs(
      overrides?: CallOverrides
    ): Promise<
      [string[], number[]] & { instruments: string[]; expiries: number[] }
    >;

    getTotalValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _quote: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      _liveThreshold: PromiseOrValue<BigNumberish>,
      _maxRangeNumber: PromiseOrValue<BigNumberish>,
      _maxOrderNumber: PromiseOrValue<BigNumberish>,
      _maxPairNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    launch(
      _quote: PromiseOrValue<string>,
      mtype: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      addArgs: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liveThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    markReady(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxOrderNumber(overrides?: CallOverrides): Promise<[number]>;

    maxPairNumber(overrides?: CallOverrides): Promise<[number]>;

    maxRangeNumber(overrides?: CallOverrides): Promise<[number]>;

    mode(overrides?: CallOverrides): Promise<[number]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingsOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber] & {
        status: number;
        native: boolean;
        quantity: BigNumber;
      }
    >;

    place(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    profitFeeRatio(overrides?: CallOverrides): Promise<[number]>;

    quote(overrides?: CallOverrides): Promise<[string]>;

    remove(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiveThreshold(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPairConfig(
      newMaxRangeNumber: PromiseOrValue<BigNumberish>,
      newMaxOrderNumber: PromiseOrValue<BigNumberish>,
      newMaxPairNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProfitFeeRatio(
      newProfitFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVaultStatus(
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sharesInfoOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { shares: BigNumber; entryValue: BigNumber }
    >;

    status(overrides?: CallOverrides): Promise<[number]>;

    sweep(
      arg: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    switchOperationMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPendingShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    trade(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromGateAndRelease(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  EMERGENCY_RATIO(overrides?: CallOverrides): Promise<number>;

  RATIO_BASE(overrides?: CallOverrides): Promise<number>;

  add(
    instrument: PromiseOrValue<string>,
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  batchCancel(
    arg: PromiseOrValue<BytesLike>,
    encodedTicks: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchPlace(
    instrument: PromiseOrValue<string>,
    args: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelPendingWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFee(
    arg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimPendingWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fill(
    instrument: PromiseOrValue<string>,
    arg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gate(overrides?: CallOverrides): Promise<string>;

  getInvolvedPairs(
    overrides?: CallOverrides
  ): Promise<
    [string[], number[]] & { instruments: string[]; expiries: number[] }
  >;

  getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _quote: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    manager: PromiseOrValue<string>,
    _liveThreshold: PromiseOrValue<BigNumberish>,
    _maxRangeNumber: PromiseOrValue<BigNumberish>,
    _maxOrderNumber: PromiseOrValue<BigNumberish>,
    _maxPairNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  launch(
    _quote: PromiseOrValue<string>,
    mtype: PromiseOrValue<string>,
    instrument: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    addArgs: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    args: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liveThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  markReady(
    users: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxOrderNumber(overrides?: CallOverrides): Promise<number>;

  maxPairNumber(overrides?: CallOverrides): Promise<number>;

  maxRangeNumber(overrides?: CallOverrides): Promise<number>;

  mode(overrides?: CallOverrides): Promise<number>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingsOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, BigNumber] & {
      status: number;
      native: boolean;
      quantity: BigNumber;
    }
  >;

  place(
    instrument: PromiseOrValue<string>,
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  profitFeeRatio(overrides?: CallOverrides): Promise<number>;

  quote(overrides?: CallOverrides): Promise<string>;

  remove(
    instrument: PromiseOrValue<string>,
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiveThreshold(
    quoteAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPairConfig(
    newMaxRangeNumber: PromiseOrValue<BigNumberish>,
    newMaxOrderNumber: PromiseOrValue<BigNumberish>,
    newMaxPairNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProfitFeeRatio(
    newProfitFeeRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVaultStatus(
    newStatus: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle(
    arg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sharesInfoOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { shares: BigNumber; entryValue: BigNumber }
  >;

  status(overrides?: CallOverrides): Promise<number>;

  sweep(
    arg: PromiseOrValue<BytesLike>,
    target: PromiseOrValue<string>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  switchOperationMode(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalPendingShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  trade(
    instrument: PromiseOrValue<string>,
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    arg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromGateAndRelease(
    users: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EMERGENCY_RATIO(overrides?: CallOverrides): Promise<number>;

    RATIO_BASE(overrides?: CallOverrides): Promise<number>;

    add(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<
      [number, number, RangeStructOutput] & {
        tickLower: number;
        tickUpper: number;
        range: RangeStructOutput;
      }
    >;

    admin(overrides?: CallOverrides): Promise<string>;

    batchCancel(
      arg: PromiseOrValue<BytesLike>,
      encodedTicks: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    batchPlace(
      instrument: PromiseOrValue<string>,
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: CallOverrides
    ): Promise<[number[], OrderStructOutput[]]>;

    cancelPendingWithdraw(overrides?: CallOverrides): Promise<void>;

    claimFee(
      arg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPendingWithdraw(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fill(
      instrument: PromiseOrValue<string>,
      arg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PositionCacheStructOutput, BigNumber] & {
        pos: PositionCacheStructOutput;
        tip: BigNumber;
      }
    >;

    gate(overrides?: CallOverrides): Promise<string>;

    getInvolvedPairs(
      overrides?: CallOverrides
    ): Promise<
      [string[], number[]] & { instruments: string[]; expiries: number[] }
    >;

    getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _quote: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      _liveThreshold: PromiseOrValue<BigNumberish>,
      _maxRangeNumber: PromiseOrValue<BigNumberish>,
      _maxOrderNumber: PromiseOrValue<BigNumberish>,
      _maxPairNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    launch(
      _quote: PromiseOrValue<string>,
      mtype: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      addArgs: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    liveThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    markReady(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    maxOrderNumber(overrides?: CallOverrides): Promise<number>;

    maxPairNumber(overrides?: CallOverrides): Promise<number>;

    maxRangeNumber(overrides?: CallOverrides): Promise<number>;

    mode(overrides?: CallOverrides): Promise<number>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingsOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber] & {
        status: number;
        native: boolean;
        quantity: BigNumber;
      }
    >;

    place(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<
      [number, OrderStructOutput] & { nonce: number; order: OrderStructOutput }
    >;

    profitFeeRatio(overrides?: CallOverrides): Promise<number>;

    quote(overrides?: CallOverrides): Promise<string>;

    remove(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLiveThreshold(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairConfig(
      newMaxRangeNumber: PromiseOrValue<BigNumberish>,
      newMaxOrderNumber: PromiseOrValue<BigNumberish>,
      newMaxPairNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfitFeeRatio(
      newProfitFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultStatus(
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      arg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sharesInfoOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { shares: BigNumber; entryValue: BigNumber }
    >;

    status(overrides?: CallOverrides): Promise<number>;

    sweep(
      arg: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    switchOperationMode(overrides?: CallOverrides): Promise<void>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    trade(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      arg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromGateAndRelease(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddInvolvedPair(address,uint32)"(
      instrument?: null,
      expiry?: null
    ): AddInvolvedPairEventFilter;
    AddInvolvedPair(
      instrument?: null,
      expiry?: null
    ): AddInvolvedPairEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemoveInvolvedPair(address,uint32)"(
      instrument?: null,
      expiry?: null
    ): RemoveInvolvedPairEventFilter;
    RemoveInvolvedPair(
      instrument?: null,
      expiry?: null
    ): RemoveInvolvedPairEventFilter;

    "SetLiveThreshold(uint256)"(
      quoteAmount?: null
    ): SetLiveThresholdEventFilter;
    SetLiveThreshold(quoteAmount?: null): SetLiveThresholdEventFilter;

    "SetPairConfig(uint8,uint8,uint8)"(
      maxRangeNumber?: null,
      maxOrderNumber?: null,
      maxPairNumber?: null
    ): SetPairConfigEventFilter;
    SetPairConfig(
      maxRangeNumber?: null,
      maxOrderNumber?: null,
      maxPairNumber?: null
    ): SetPairConfigEventFilter;

    "SetProfitFeeRatio(uint32)"(
      newProfitFeeRatio?: null
    ): SetProfitFeeRatioEventFilter;
    SetProfitFeeRatio(newProfitFeeRatio?: null): SetProfitFeeRatioEventFilter;

    "SetVaultStatus(uint8)"(status?: null): SetVaultStatusEventFilter;
    SetVaultStatus(status?: null): SetVaultStatusEventFilter;

    "SwitchOperationMode(uint8)"(mode?: null): SwitchOperationModeEventFilter;
    SwitchOperationMode(mode?: null): SwitchOperationModeEventFilter;

    "UpdatePending(address,tuple,uint256)"(
      user?: PromiseOrValue<string> | null,
      pending?: null,
      totalPendingShares?: null
    ): UpdatePendingEventFilter;
    UpdatePending(
      user?: PromiseOrValue<string> | null,
      pending?: null,
      totalPendingShares?: null
    ): UpdatePendingEventFilter;

    "UpdateShareInfo(address,tuple,uint128,int256)"(
      user?: PromiseOrValue<string> | null,
      info?: null,
      totalShares?: null,
      quantity?: null
    ): UpdateShareInfoEventFilter;
    UpdateShareInfo(
      user?: PromiseOrValue<string> | null,
      info?: null,
      totalShares?: null,
      quantity?: null
    ): UpdateShareInfoEventFilter;

    "UpdateTotalFee(uint128)"(totalFee?: null): UpdateTotalFeeEventFilter;
    UpdateTotalFee(totalFee?: null): UpdateTotalFeeEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    EMERGENCY_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    RATIO_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    batchCancel(
      arg: PromiseOrValue<BytesLike>,
      encodedTicks: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchPlace(
      instrument: PromiseOrValue<string>,
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelPendingWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFee(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimPendingWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fill(
      instrument: PromiseOrValue<string>,
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gate(overrides?: CallOverrides): Promise<BigNumber>;

    getInvolvedPairs(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _quote: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      _liveThreshold: PromiseOrValue<BigNumberish>,
      _maxRangeNumber: PromiseOrValue<BigNumberish>,
      _maxOrderNumber: PromiseOrValue<BigNumberish>,
      _maxPairNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    launch(
      _quote: PromiseOrValue<string>,
      mtype: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      addArgs: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidate(
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liveThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    markReady(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxOrderNumber(overrides?: CallOverrides): Promise<BigNumber>;

    maxPairNumber(overrides?: CallOverrides): Promise<BigNumber>;

    maxRangeNumber(overrides?: CallOverrides): Promise<BigNumber>;

    mode(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingsOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    place(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    profitFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    quote(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiveThreshold(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPairConfig(
      newMaxRangeNumber: PromiseOrValue<BigNumberish>,
      newMaxOrderNumber: PromiseOrValue<BigNumberish>,
      newMaxPairNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProfitFeeRatio(
      newProfitFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVaultStatus(
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sharesInfoOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      arg: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    switchOperationMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    trade(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromGateAndRelease(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EMERGENCY_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATIO_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchCancel(
      arg: PromiseOrValue<BytesLike>,
      encodedTicks: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchPlace(
      instrument: PromiseOrValue<string>,
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelPendingWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFee(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimPendingWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fill(
      instrument: PromiseOrValue<string>,
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInvolvedPairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _quote: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      _liveThreshold: PromiseOrValue<BigNumberish>,
      _maxRangeNumber: PromiseOrValue<BigNumberish>,
      _maxOrderNumber: PromiseOrValue<BigNumberish>,
      _maxPairNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    launch(
      _quote: PromiseOrValue<string>,
      mtype: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      addArgs: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liveThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markReady(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxOrderNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPairNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRangeNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingsOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    place(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    profitFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remove(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiveThreshold(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPairConfig(
      newMaxRangeNumber: PromiseOrValue<BigNumberish>,
      newMaxOrderNumber: PromiseOrValue<BigNumberish>,
      newMaxPairNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProfitFeeRatio(
      newProfitFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVaultStatus(
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sharesInfoOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(
      arg: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    switchOperationMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPendingShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trade(
      instrument: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromGateAndRelease(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
