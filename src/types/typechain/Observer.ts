/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type PositionStruct = {
  balance: PromiseOrValue<BigNumberish>;
  size: PromiseOrValue<BigNumberish>;
  entryNotional: PromiseOrValue<BigNumberish>;
  entrySocialLossIndex: PromiseOrValue<BigNumberish>;
  entryFundingIndex: PromiseOrValue<BigNumberish>;
};

export type PositionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  balance: BigNumber;
  size: BigNumber;
  entryNotional: BigNumber;
  entrySocialLossIndex: BigNumber;
  entryFundingIndex: BigNumber;
};

export type OrderStruct = {
  balance: PromiseOrValue<BigNumberish>;
  size: PromiseOrValue<BigNumberish>;
};

export type OrderStructOutput = [BigNumber, BigNumber] & {
  balance: BigNumber;
  size: BigNumber;
};

export type RangeStruct = {
  liquidity: PromiseOrValue<BigNumberish>;
  entryFeeIndex: PromiseOrValue<BigNumberish>;
  balance: PromiseOrValue<BigNumberish>;
  sqrtEntryPX96: PromiseOrValue<BigNumberish>;
};

export type RangeStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  liquidity: BigNumber;
  entryFeeIndex: BigNumber;
  balance: BigNumber;
  sqrtEntryPX96: BigNumber;
};

export type PortfolioStruct = {
  oids: PromiseOrValue<BigNumberish>[];
  rids: PromiseOrValue<BigNumberish>[];
  position: PositionStruct;
  orders: OrderStruct[];
  ranges: RangeStruct[];
  ordersTaken: PromiseOrValue<BigNumberish>[];
};

export type PortfolioStructOutput = [
  number[],
  number[],
  PositionStructOutput,
  OrderStructOutput[],
  RangeStructOutput[],
  BigNumber[]
] & {
  oids: number[];
  rids: number[];
  position: PositionStructOutput;
  orders: OrderStructOutput[];
  ranges: RangeStructOutput[];
  ordersTaken: BigNumber[];
};

export type BlockInfoStruct = {
  timestamp: PromiseOrValue<BigNumberish>;
  height: PromiseOrValue<BigNumberish>;
};

export type BlockInfoStructOutput = [number, number] & {
  timestamp: number;
  height: number;
};

export type DexV2FeederStruct = {
  ftype: PromiseOrValue<BigNumberish>;
  isToken0Quote: PromiseOrValue<boolean>;
  pair: PromiseOrValue<string>;
  scaler0: PromiseOrValue<BigNumberish>;
  scaler1: PromiseOrValue<BigNumberish>;
};

export type DexV2FeederStructOutput = [
  number,
  boolean,
  string,
  BigNumber,
  BigNumber
] & {
  ftype: number;
  isToken0Quote: boolean;
  pair: string;
  scaler0: BigNumber;
  scaler1: BigNumber;
};

export type PriceFeederStruct = {
  ftype: PromiseOrValue<BigNumberish>;
  scaler0: PromiseOrValue<BigNumberish>;
  aggregator0: PromiseOrValue<string>;
  heartBeat0: PromiseOrValue<BigNumberish>;
  scaler1: PromiseOrValue<BigNumberish>;
  aggregator1: PromiseOrValue<string>;
  heartBeat1: PromiseOrValue<BigNumberish>;
};

export type PriceFeederStructOutput = [
  number,
  BigNumber,
  string,
  number,
  BigNumber,
  string,
  number
] & {
  ftype: number;
  scaler0: BigNumber;
  aggregator0: string;
  heartBeat0: number;
  scaler1: BigNumber;
  aggregator1: string;
  heartBeat1: number;
};

export type QuoteParamStruct = {
  minMarginAmount: PromiseOrValue<BigNumberish>;
  tradingFeeRatio: PromiseOrValue<BigNumberish>;
  protocolFeeRatio: PromiseOrValue<BigNumberish>;
  stabilityFeeRatioParam: PromiseOrValue<BigNumberish>;
  qtype: PromiseOrValue<BigNumberish>;
  tip: PromiseOrValue<BigNumberish>;
};

export type QuoteParamStructOutput = [
  BigNumber,
  number,
  number,
  BigNumber,
  number,
  BigNumber
] & {
  minMarginAmount: BigNumber;
  tradingFeeRatio: number;
  protocolFeeRatio: number;
  stabilityFeeRatioParam: BigNumber;
  qtype: number;
  tip: BigNumber;
};

export type AmmStruct = {
  expiry: PromiseOrValue<BigNumberish>;
  timestamp: PromiseOrValue<BigNumberish>;
  status: PromiseOrValue<BigNumberish>;
  tick: PromiseOrValue<BigNumberish>;
  sqrtPX96: PromiseOrValue<BigNumberish>;
  liquidity: PromiseOrValue<BigNumberish>;
  totalLiquidity: PromiseOrValue<BigNumberish>;
  totalShort: PromiseOrValue<BigNumberish>;
  openInterests: PromiseOrValue<BigNumberish>;
  totalLong: PromiseOrValue<BigNumberish>;
  involvedFund: PromiseOrValue<BigNumberish>;
  feeIndex: PromiseOrValue<BigNumberish>;
  protocolFee: PromiseOrValue<BigNumberish>;
  longSocialLossIndex: PromiseOrValue<BigNumberish>;
  shortSocialLossIndex: PromiseOrValue<BigNumberish>;
  longFundingIndex: PromiseOrValue<BigNumberish>;
  shortFundingIndex: PromiseOrValue<BigNumberish>;
  insuranceFund: PromiseOrValue<BigNumberish>;
  settlementPrice: PromiseOrValue<BigNumberish>;
};

export type AmmStructOutput = [
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  expiry: number;
  timestamp: number;
  status: number;
  tick: number;
  sqrtPX96: BigNumber;
  liquidity: BigNumber;
  totalLiquidity: BigNumber;
  totalShort: BigNumber;
  openInterests: BigNumber;
  totalLong: BigNumber;
  involvedFund: BigNumber;
  feeIndex: BigNumber;
  protocolFee: BigNumber;
  longSocialLossIndex: BigNumber;
  shortSocialLossIndex: BigNumber;
  longFundingIndex: BigNumber;
  shortFundingIndex: BigNumber;
  insuranceFund: BigNumber;
  settlementPrice: BigNumber;
};

export type AssembledInstrumentDataStruct = {
  instrumentAddr: PromiseOrValue<string>;
  symbol: PromiseOrValue<string>;
  market: PromiseOrValue<string>;
  dexV2Feeder: DexV2FeederStruct;
  priceFeeder: PriceFeederStruct;
  initialMarginRatio: PromiseOrValue<BigNumberish>;
  maintenanceMarginRatio: PromiseOrValue<BigNumberish>;
  param: QuoteParamStruct;
  spotPrice: PromiseOrValue<BigNumberish>;
  condition: PromiseOrValue<BigNumberish>;
  amms: AmmStruct[];
  markPrices: PromiseOrValue<BigNumberish>[];
};

export type AssembledInstrumentDataStructOutput = [
  string,
  string,
  string,
  DexV2FeederStructOutput,
  PriceFeederStructOutput,
  number,
  number,
  QuoteParamStructOutput,
  BigNumber,
  number,
  AmmStructOutput[],
  BigNumber[]
] & {
  instrumentAddr: string;
  symbol: string;
  market: string;
  dexV2Feeder: DexV2FeederStructOutput;
  priceFeeder: PriceFeederStructOutput;
  initialMarginRatio: number;
  maintenanceMarginRatio: number;
  param: QuoteParamStructOutput;
  spotPrice: BigNumber;
  condition: number;
  amms: AmmStructOutput[];
  markPrices: BigNumber[];
};

export type FetchInstrumentParamStruct = {
  instrument: PromiseOrValue<string>;
  expiries: PromiseOrValue<BigNumberish>[];
};

export type FetchInstrumentParamStructOutput = [string, number[]] & {
  instrument: string;
  expiries: number[];
};

export type PearlStruct = {
  liquidityGross: PromiseOrValue<BigNumberish>;
  liquidityNet: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  left: PromiseOrValue<BigNumberish>;
  taken: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
  entrySocialLossIndex: PromiseOrValue<BigNumberish>;
  entryFundingIndex: PromiseOrValue<BigNumberish>;
};

export type PearlStructOutput = [
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  liquidityGross: BigNumber;
  liquidityNet: BigNumber;
  nonce: number;
  left: BigNumber;
  taken: BigNumber;
  fee: BigNumber;
  entrySocialLossIndex: BigNumber;
  entryFundingIndex: BigNumber;
};

export type PendingStruct = {
  timestamp: PromiseOrValue<BigNumberish>;
  native: PromiseOrValue<boolean>;
  amount: PromiseOrValue<BigNumberish>;
  exemption: PromiseOrValue<BigNumberish>;
};

export type PendingStructOutput = [number, boolean, BigNumber, BigNumber] & {
  timestamp: number;
  native: boolean;
  amount: BigNumber;
  exemption: BigNumber;
};

export type RecordStruct = {
  taken: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
  entrySocialLossIndex: PromiseOrValue<BigNumberish>;
  entryFundingIndex: PromiseOrValue<BigNumberish>;
};

export type RecordStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  taken: BigNumber;
  fee: BigNumber;
  entrySocialLossIndex: BigNumber;
  entryFundingIndex: BigNumber;
};

export type SettingStruct = {
  symbol: PromiseOrValue<string>;
  config: PromiseOrValue<string>;
  gate: PromiseOrValue<string>;
  market: PromiseOrValue<string>;
  quote: PromiseOrValue<string>;
  decimals: PromiseOrValue<BigNumberish>;
  initialMarginRatio: PromiseOrValue<BigNumberish>;
  maintenanceMarginRatio: PromiseOrValue<BigNumberish>;
  param: QuoteParamStruct;
};

export type SettingStructOutput = [
  string,
  string,
  string,
  string,
  string,
  number,
  number,
  number,
  QuoteParamStructOutput
] & {
  symbol: string;
  config: string;
  gate: string;
  market: string;
  quote: string;
  decimals: number;
  initialMarginRatio: number;
  maintenanceMarginRatio: number;
  param: QuoteParamStructOutput;
};

export type QuotationStruct = {
  benchmark: PromiseOrValue<BigNumberish>;
  sqrtFairPX96: PromiseOrValue<BigNumberish>;
  tick: PromiseOrValue<BigNumberish>;
  mark: PromiseOrValue<BigNumberish>;
  entryNotional: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
  minAmount: PromiseOrValue<BigNumberish>;
  sqrtPostFairPX96: PromiseOrValue<BigNumberish>;
  postTick: PromiseOrValue<BigNumberish>;
};

export type QuotationStructOutput = [
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  benchmark: BigNumber;
  sqrtFairPX96: BigNumber;
  tick: number;
  mark: BigNumber;
  entryNotional: BigNumber;
  fee: BigNumber;
  minAmount: BigNumber;
  sqrtPostFairPX96: BigNumber;
  postTick: number;
};

export type CurveStateStruct = {
  sqrtPX96: PromiseOrValue<BigNumberish>;
  tick: PromiseOrValue<BigNumberish>;
  liquidity: PromiseOrValue<BigNumberish>;
};

export type CurveStateStructOutput = [BigNumber, number, BigNumber] & {
  sqrtPX96: BigNumber;
  tick: number;
  liquidity: BigNumber;
};

export type MinimalPearlStruct = {
  liquidityNet: PromiseOrValue<BigNumberish>;
  left: PromiseOrValue<BigNumberish>;
};

export type MinimalPearlStructOutput = [BigNumber, BigNumber] & {
  liquidityNet: BigNumber;
  left: BigNumber;
};

export interface ObserverInterface extends utils.Interface {
  functions: {
    "gate()": FunctionFragment;
    "getAcc(address,uint32,address)": FunctionFragment;
    "getAccMeta(address,uint32,address)": FunctionFragment;
    "getAllInstruments()": FunctionFragment;
    "getAmm(address,uint32)": FunctionFragment;
    "getInstrumentBatch((address,uint32[])[])": FunctionFragment;
    "getInstrumentByAddressList(address[])": FunctionFragment;
    "getNextInitializedTickOutside(address,uint32,int24,bool)": FunctionFragment;
    "getOrderIndexes(address,uint32,address)": FunctionFragment;
    "getOrders(address,uint32,address,uint48[])": FunctionFragment;
    "getPearls(address,uint32,int24[])": FunctionFragment;
    "getPendings(address[],address)": FunctionFragment;
    "getPortfolios(address,address)": FunctionFragment;
    "getPosition(address,uint32,address)": FunctionFragment;
    "getQuoteParam(address)": FunctionFragment;
    "getRangeIndexes(address,uint32,address)": FunctionFragment;
    "getRanges(address,uint32,address,uint48[])": FunctionFragment;
    "getRecords(address,uint32,int24[],uint24[])": FunctionFragment;
    "getSetting(address)": FunctionFragment;
    "getTickBitmaps(address,uint32,int16[])": FunctionFragment;
    "getVaultBalances(address,address[])": FunctionFragment;
    "inquireByNotional(address,uint32,uint256,bool)": FunctionFragment;
    "inspectMaxReserveDexV2Pair(address,address)": FunctionFragment;
    "liquidityDetails(address,uint32,uint24)": FunctionFragment;
    "sizeByNotional(address,uint32,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "gate"
      | "getAcc"
      | "getAccMeta"
      | "getAllInstruments"
      | "getAmm"
      | "getInstrumentBatch"
      | "getInstrumentByAddressList"
      | "getNextInitializedTickOutside"
      | "getOrderIndexes"
      | "getOrders"
      | "getPearls"
      | "getPendings"
      | "getPortfolios"
      | "getPosition"
      | "getQuoteParam"
      | "getRangeIndexes"
      | "getRanges"
      | "getRecords"
      | "getSetting"
      | "getTickBitmaps"
      | "getVaultBalances"
      | "inquireByNotional"
      | "inspectMaxReserveDexV2Pair"
      | "liquidityDetails"
      | "sizeByNotional"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "gate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAcc",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccMeta",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllInstruments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmm",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstrumentBatch",
    values: [FetchInstrumentParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstrumentByAddressList",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextInitializedTickOutside",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderIndexes",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPearls",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendings",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPortfolios",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteParam",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRangeIndexes",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRanges",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecords",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSetting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTickBitmaps",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultBalances",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "inquireByNotional",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "inspectMaxReserveDexV2Pair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityDetails",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sizeByNotional",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "gate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAcc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAccMeta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllInstruments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAmm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInstrumentBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstrumentByAddressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextInitializedTickOutside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPearls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPortfolios",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRangeIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRanges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRecords", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSetting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTickBitmaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inquireByNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inspectMaxReserveDexV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sizeByNotional",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Observer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ObserverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gate(overrides?: CallOverrides): Promise<[string]>;

    getAcc(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [PortfolioStructOutput, BlockInfoStructOutput] & {
        portfolio: PortfolioStructOutput;
        blockInfo: BlockInfoStructOutput;
      }
    >;

    getAccMeta(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { onumber: BigNumber; rnumber: BigNumber }
    >;

    getAllInstruments(
      overrides?: CallOverrides
    ): Promise<[AssembledInstrumentDataStructOutput[], BlockInfoStructOutput]>;

    getAmm(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AmmStructOutput]>;

    getInstrumentBatch(
      params: FetchInstrumentParamStruct[],
      overrides?: CallOverrides
    ): Promise<[AssembledInstrumentDataStructOutput[], BlockInfoStructOutput]>;

    getInstrumentByAddressList(
      instrumentList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[AssembledInstrumentDataStructOutput[], BlockInfoStructOutput]>;

    getNextInitializedTickOutside(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tick: PromiseOrValue<BigNumberish>,
      right: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getOrderIndexes(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    getOrders(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      oids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[OrderStructOutput[]]>;

    getPearls(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[PearlStructOutput[]]>;

    getPendings(
      quotes: PromiseOrValue<string>[],
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [PendingStructOutput[], BlockInfoStructOutput] & {
        pendings: PendingStructOutput[];
        blockInfo: BlockInfoStructOutput;
      }
    >;

    getPortfolios(
      target: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number[], PortfolioStructOutput[], BlockInfoStructOutput] & {
        expiries: number[];
        portfolios: PortfolioStructOutput[];
        blockInfo: BlockInfoStructOutput;
      }
    >;

    getPosition(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput]>;

    getQuoteParam(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[QuoteParamStructOutput]>;

    getRangeIndexes(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    getRanges(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      rids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[RangeStructOutput[]]>;

    getRecords(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tids: PromiseOrValue<BigNumberish>[],
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[RecordStructOutput[]]>;

    getSetting(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SettingStructOutput]>;

    getTickBitmaps(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tbids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVaultBalances(
      target: PromiseOrValue<string>,
      quotes: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BlockInfoStructOutput]>;

    inquireByNotional(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      notional: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, QuotationStructOutput] & {
        size: BigNumber;
        quotation: QuotationStructOutput;
      }
    >;

    inspectMaxReserveDexV2Pair(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        maxReservePair: string;
        reserve0: BigNumber;
        reserve1: BigNumber;
      }
    >;

    liquidityDetails(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tickDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        CurveStateStructOutput,
        number[],
        MinimalPearlStructOutput[],
        BlockInfoStructOutput
      ] & {
        amm: CurveStateStructOutput;
        tids: number[];
        pearls: MinimalPearlStructOutput[];
        blockInfo: BlockInfoStructOutput;
      }
    >;

    sizeByNotional(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      notional: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  gate(overrides?: CallOverrides): Promise<string>;

  getAcc(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [PortfolioStructOutput, BlockInfoStructOutput] & {
      portfolio: PortfolioStructOutput;
      blockInfo: BlockInfoStructOutput;
    }
  >;

  getAccMeta(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { onumber: BigNumber; rnumber: BigNumber }
  >;

  getAllInstruments(
    overrides?: CallOverrides
  ): Promise<[AssembledInstrumentDataStructOutput[], BlockInfoStructOutput]>;

  getAmm(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AmmStructOutput>;

  getInstrumentBatch(
    params: FetchInstrumentParamStruct[],
    overrides?: CallOverrides
  ): Promise<[AssembledInstrumentDataStructOutput[], BlockInfoStructOutput]>;

  getInstrumentByAddressList(
    instrumentList: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<[AssembledInstrumentDataStructOutput[], BlockInfoStructOutput]>;

  getNextInitializedTickOutside(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    tick: PromiseOrValue<BigNumberish>,
    right: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<number>;

  getOrderIndexes(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  getOrders(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    oids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<OrderStructOutput[]>;

  getPearls(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    tids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<PearlStructOutput[]>;

  getPendings(
    quotes: PromiseOrValue<string>[],
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [PendingStructOutput[], BlockInfoStructOutput] & {
      pendings: PendingStructOutput[];
      blockInfo: BlockInfoStructOutput;
    }
  >;

  getPortfolios(
    target: PromiseOrValue<string>,
    instrument: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number[], PortfolioStructOutput[], BlockInfoStructOutput] & {
      expiries: number[];
      portfolios: PortfolioStructOutput[];
      blockInfo: BlockInfoStructOutput;
    }
  >;

  getPosition(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput>;

  getQuoteParam(
    instrument: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<QuoteParamStructOutput>;

  getRangeIndexes(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  getRanges(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    rids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<RangeStructOutput[]>;

  getRecords(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    tids: PromiseOrValue<BigNumberish>[],
    nonces: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<RecordStructOutput[]>;

  getSetting(
    instrument: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SettingStructOutput>;

  getTickBitmaps(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    tbids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVaultBalances(
    target: PromiseOrValue<string>,
    quotes: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BlockInfoStructOutput]>;

  inquireByNotional(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    notional: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, QuotationStructOutput] & {
      size: BigNumber;
      quotation: QuotationStructOutput;
    }
  >;

  inspectMaxReserveDexV2Pair(
    base: PromiseOrValue<string>,
    quote: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      maxReservePair: string;
      reserve0: BigNumber;
      reserve1: BigNumber;
    }
  >;

  liquidityDetails(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    tickDelta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      CurveStateStructOutput,
      number[],
      MinimalPearlStructOutput[],
      BlockInfoStructOutput
    ] & {
      amm: CurveStateStructOutput;
      tids: number[];
      pearls: MinimalPearlStructOutput[];
      blockInfo: BlockInfoStructOutput;
    }
  >;

  sizeByNotional(
    instrument: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    notional: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    gate(overrides?: CallOverrides): Promise<string>;

    getAcc(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [PortfolioStructOutput, BlockInfoStructOutput] & {
        portfolio: PortfolioStructOutput;
        blockInfo: BlockInfoStructOutput;
      }
    >;

    getAccMeta(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { onumber: BigNumber; rnumber: BigNumber }
    >;

    getAllInstruments(
      overrides?: CallOverrides
    ): Promise<[AssembledInstrumentDataStructOutput[], BlockInfoStructOutput]>;

    getAmm(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AmmStructOutput>;

    getInstrumentBatch(
      params: FetchInstrumentParamStruct[],
      overrides?: CallOverrides
    ): Promise<[AssembledInstrumentDataStructOutput[], BlockInfoStructOutput]>;

    getInstrumentByAddressList(
      instrumentList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[AssembledInstrumentDataStructOutput[], BlockInfoStructOutput]>;

    getNextInitializedTickOutside(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tick: PromiseOrValue<BigNumberish>,
      right: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<number>;

    getOrderIndexes(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    getOrders(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      oids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<OrderStructOutput[]>;

    getPearls(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PearlStructOutput[]>;

    getPendings(
      quotes: PromiseOrValue<string>[],
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [PendingStructOutput[], BlockInfoStructOutput] & {
        pendings: PendingStructOutput[];
        blockInfo: BlockInfoStructOutput;
      }
    >;

    getPortfolios(
      target: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number[], PortfolioStructOutput[], BlockInfoStructOutput] & {
        expiries: number[];
        portfolios: PortfolioStructOutput[];
        blockInfo: BlockInfoStructOutput;
      }
    >;

    getPosition(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;

    getQuoteParam(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<QuoteParamStructOutput>;

    getRangeIndexes(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    getRanges(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      rids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<RangeStructOutput[]>;

    getRecords(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tids: PromiseOrValue<BigNumberish>[],
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<RecordStructOutput[]>;

    getSetting(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SettingStructOutput>;

    getTickBitmaps(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tbids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVaultBalances(
      target: PromiseOrValue<string>,
      quotes: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BlockInfoStructOutput]>;

    inquireByNotional(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      notional: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, QuotationStructOutput] & {
        size: BigNumber;
        quotation: QuotationStructOutput;
      }
    >;

    inspectMaxReserveDexV2Pair(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        maxReservePair: string;
        reserve0: BigNumber;
        reserve1: BigNumber;
      }
    >;

    liquidityDetails(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tickDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        CurveStateStructOutput,
        number[],
        MinimalPearlStructOutput[],
        BlockInfoStructOutput
      ] & {
        amm: CurveStateStructOutput;
        tids: number[];
        pearls: MinimalPearlStructOutput[];
        blockInfo: BlockInfoStructOutput;
      }
    >;

    sizeByNotional(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      notional: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    gate(overrides?: CallOverrides): Promise<BigNumber>;

    getAcc(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccMeta(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllInstruments(overrides?: CallOverrides): Promise<BigNumber>;

    getAmm(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstrumentBatch(
      params: FetchInstrumentParamStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstrumentByAddressList(
      instrumentList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextInitializedTickOutside(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tick: PromiseOrValue<BigNumberish>,
      right: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderIndexes(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrders(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      oids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPearls(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendings(
      quotes: PromiseOrValue<string>[],
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPortfolios(
      target: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteParam(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRangeIndexes(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRanges(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      rids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecords(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tids: PromiseOrValue<BigNumberish>[],
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSetting(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTickBitmaps(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tbids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultBalances(
      target: PromiseOrValue<string>,
      quotes: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inquireByNotional(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      notional: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inspectMaxReserveDexV2Pair(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityDetails(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tickDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sizeByNotional(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      notional: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAcc(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccMeta(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllInstruments(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmm(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstrumentBatch(
      params: FetchInstrumentParamStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstrumentByAddressList(
      instrumentList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextInitializedTickOutside(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tick: PromiseOrValue<BigNumberish>,
      right: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderIndexes(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrders(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      oids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPearls(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendings(
      quotes: PromiseOrValue<string>[],
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPortfolios(
      target: PromiseOrValue<string>,
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteParam(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRangeIndexes(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRanges(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      rids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecords(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tids: PromiseOrValue<BigNumberish>[],
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSetting(
      instrument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTickBitmaps(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tbids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultBalances(
      target: PromiseOrValue<string>,
      quotes: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inquireByNotional(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      notional: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inspectMaxReserveDexV2Pair(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityDetails(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      tickDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sizeByNotional(
      instrument: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      notional: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
