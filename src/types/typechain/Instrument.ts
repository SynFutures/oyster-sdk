/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type RangeStruct = {
  liquidity: PromiseOrValue<BigNumberish>;
  entryFeeIndex: PromiseOrValue<BigNumberish>;
  balance: PromiseOrValue<BigNumberish>;
  sqrtEntryPX96: PromiseOrValue<BigNumberish>;
};

export type RangeStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  liquidity: BigNumber;
  entryFeeIndex: BigNumber;
  balance: BigNumber;
  sqrtEntryPX96: BigNumber;
};

export type OrderStruct = {
  balance: PromiseOrValue<BigNumberish>;
  size: PromiseOrValue<BigNumberish>;
};

export type OrderStructOutput = [BigNumber, BigNumber] & {
  balance: BigNumber;
  size: BigNumber;
};

export type PositionCacheStruct = {
  balance: PromiseOrValue<BigNumberish>;
  size: PromiseOrValue<BigNumberish>;
  entryNotional: PromiseOrValue<BigNumberish>;
  entrySocialLossIndex: PromiseOrValue<BigNumberish>;
  entryFundingIndex: PromiseOrValue<BigNumberish>;
};

export type PositionCacheStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  balance: BigNumber;
  size: BigNumber;
  entryNotional: BigNumber;
  entrySocialLossIndex: BigNumber;
  entryFundingIndex: BigNumber;
};

export type QuotationStruct = {
  benchmark: PromiseOrValue<BigNumberish>;
  sqrtFairPX96: PromiseOrValue<BigNumberish>;
  tick: PromiseOrValue<BigNumberish>;
  mark: PromiseOrValue<BigNumberish>;
  entryNotional: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
  minAmount: PromiseOrValue<BigNumberish>;
  sqrtPostFairPX96: PromiseOrValue<BigNumberish>;
  postTick: PromiseOrValue<BigNumberish>;
};

export type QuotationStructOutput = [
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  benchmark: BigNumber;
  sqrtFairPX96: BigNumber;
  tick: number;
  mark: BigNumber;
  entryNotional: BigNumber;
  fee: BigNumber;
  minAmount: BigNumber;
  sqrtPostFairPX96: BigNumber;
  postTick: number;
};

export type QuoteParamStruct = {
  minMarginAmount: PromiseOrValue<BigNumberish>;
  tradingFeeRatio: PromiseOrValue<BigNumberish>;
  protocolFeeRatio: PromiseOrValue<BigNumberish>;
  stabilityFeeRatioParam: PromiseOrValue<BigNumberish>;
  qtype: PromiseOrValue<BigNumberish>;
  tip: PromiseOrValue<BigNumberish>;
};

export type QuoteParamStructOutput = [
  BigNumber,
  number,
  number,
  BigNumber,
  number,
  BigNumber
] & {
  minMarginAmount: BigNumber;
  tradingFeeRatio: number;
  protocolFeeRatio: number;
  stabilityFeeRatioParam: BigNumber;
  qtype: number;
  tip: BigNumber;
};

export interface InstrumentInterface extends utils.Interface {
  functions: {
    "add(bytes32[2])": FunctionFragment;
    "batchPlace(bytes32[3])": FunctionFragment;
    "cancel(bytes32)": FunctionFragment;
    "claimProtocolFee(uint32)": FunctionFragment;
    "claimYield(address)": FunctionFragment;
    "condition()": FunctionFragment;
    "configureYieldMode(uint8)": FunctionFragment;
    "donateInsuranceFund(uint32,uint256)": FunctionFragment;
    "fill(bytes32)": FunctionFragment;
    "freeze()": FunctionFragment;
    "getExpiries()": FunctionFragment;
    "init(address,bytes32[2])": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "inquire(uint32,int256)": FunctionFragment;
    "liquidate(uint32,address,int256,uint256)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "normalize()": FunctionFragment;
    "place(bytes32[2])": FunctionFragment;
    "placePaused()": FunctionFragment;
    "queryAccount(uint32,address,uint8,bytes)": FunctionFragment;
    "queryContext(uint32,uint8,uint256[],bytes)": FunctionFragment;
    "querySetting(uint256[])": FunctionFragment;
    "recycleInsuranceFund(uint32)": FunctionFragment;
    "remove(bytes32[2])": FunctionFragment;
    "resolve(uint128)": FunctionFragment;
    "setLeverage(uint8,uint16)": FunctionFragment;
    "setPlacePaused(bool)": FunctionFragment;
    "setQuoteParam((uint128,uint16,uint16,uint64,uint8,uint128))": FunctionFragment;
    "settle(uint32,address)": FunctionFragment;
    "sweep(uint32,address,int256)": FunctionFragment;
    "syncPointsOperator()": FunctionFragment;
    "trade(bytes32[2])": FunctionFragment;
    "update(uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add"
      | "batchPlace"
      | "cancel"
      | "claimProtocolFee"
      | "claimYield"
      | "condition"
      | "configureYieldMode"
      | "donateInsuranceFund"
      | "fill"
      | "freeze"
      | "getExpiries"
      | "init"
      | "initialize"
      | "inquire"
      | "liquidate"
      | "multicall"
      | "normalize"
      | "place"
      | "placePaused"
      | "queryAccount"
      | "queryContext"
      | "querySetting"
      | "recycleInsuranceFund"
      | "remove"
      | "resolve"
      | "setLeverage"
      | "setPlacePaused"
      | "setQuoteParam"
      | "settle"
      | "sweep"
      | "syncPointsOperator"
      | "trade"
      | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [[PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchPlace",
    values: [
      [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimProtocolFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYield",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "condition", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "configureYieldMode",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "donateInsuranceFund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fill",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "freeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExpiries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "inquire",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "normalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "place",
    values: [[PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]]
  ): string;
  encodeFunctionData(
    functionFragment: "placePaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryContext",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "querySetting",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "recycleInsuranceFund",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [[PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeverage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlacePaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuoteParam",
    values: [QuoteParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "syncPointsOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [[PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchPlace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimYield", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "condition", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureYieldMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donateInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpiries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inquire", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "normalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "place", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "querySetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recycleInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlacePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuoteParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncPointsOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Add(uint32,address,int24,int24,tuple)": EventFragment;
    "Adjust(uint32,address,int256)": EventFragment;
    "Cancel(uint32,address,int24,uint32,uint256,tuple)": EventFragment;
    "ClaimProtocolFee(uint32,uint256)": EventFragment;
    "DeleteContext(uint32)": EventFragment;
    "DonateInsuranceFund(uint32,address,uint256)": EventFragment;
    "Fill(uint32,address,int24,uint32,uint256,tuple,address,uint256)": EventFragment;
    "FundingFee(address,int256)": EventFragment;
    "Liquidate(uint32,address,uint256,uint256,address,int256)": EventFragment;
    "Place(uint32,address,int24,uint32,tuple)": EventFragment;
    "RecycleInsuranceFund(uint32,uint256)": EventFragment;
    "Remove(uint32,address,int24,int24,uint256,tuple,address,uint256)": EventFragment;
    "Settle(uint32,address,uint256,uint256,address)": EventFragment;
    "Sweep(uint32,address,int256,int256,uint256,uint256,uint16,uint160,uint256,address)": EventFragment;
    "Trade(uint32,address,int256,uint256,int256,uint256,uint256,uint16,uint160,uint256)": EventFragment;
    "UpdateAmmStatus(uint32,uint8,uint160,uint256)": EventFragment;
    "UpdateCondition(uint32,uint8)": EventFragment;
    "UpdateFeeState(uint32,uint128,uint128)": EventFragment;
    "UpdateFundingIndex(uint256)": EventFragment;
    "UpdateMarginRatio(uint16,uint16)": EventFragment;
    "UpdateParam(tuple)": EventFragment;
    "UpdatePosition(uint32,address,tuple)": EventFragment;
    "UpdateSocialLossInsuranceFund(uint32,uint128,uint128,uint128)": EventFragment;
    "WithdrawRangeFee(uint32,address,uint48,uint256,address,tuple)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Adjust"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteContext"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonateInsuranceFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Place"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecycleInsuranceFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Remove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sweep"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAmmStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCondition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFundingIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMarginRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateParam"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePosition"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateSocialLossInsuranceFund"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRangeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface AddEventObject {
  expiry: number;
  trader: string;
  tickLower: number;
  tickUpper: number;
  range: RangeStructOutput;
}
export type AddEvent = TypedEvent<
  [number, string, number, number, RangeStructOutput],
  AddEventObject
>;

export type AddEventFilter = TypedEventFilter<AddEvent>;

export interface AdjustEventObject {
  expiry: number;
  trader: string;
  net: BigNumber;
}
export type AdjustEvent = TypedEvent<
  [number, string, BigNumber],
  AdjustEventObject
>;

export type AdjustEventFilter = TypedEventFilter<AdjustEvent>;

export interface CancelEventObject {
  expiry: number;
  trader: string;
  tick: number;
  nonce: number;
  fee: BigNumber;
  pic: PositionCacheStructOutput;
}
export type CancelEvent = TypedEvent<
  [number, string, number, number, BigNumber, PositionCacheStructOutput],
  CancelEventObject
>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface ClaimProtocolFeeEventObject {
  expiry: number;
  amount: BigNumber;
}
export type ClaimProtocolFeeEvent = TypedEvent<
  [number, BigNumber],
  ClaimProtocolFeeEventObject
>;

export type ClaimProtocolFeeEventFilter =
  TypedEventFilter<ClaimProtocolFeeEvent>;

export interface DeleteContextEventObject {
  expiry: number;
}
export type DeleteContextEvent = TypedEvent<[number], DeleteContextEventObject>;

export type DeleteContextEventFilter = TypedEventFilter<DeleteContextEvent>;

export interface DonateInsuranceFundEventObject {
  expiry: number;
  donator: string;
  amount: BigNumber;
}
export type DonateInsuranceFundEvent = TypedEvent<
  [number, string, BigNumber],
  DonateInsuranceFundEventObject
>;

export type DonateInsuranceFundEventFilter =
  TypedEventFilter<DonateInsuranceFundEvent>;

export interface FillEventObject {
  expiry: number;
  trader: string;
  tick: number;
  nonce: number;
  fee: BigNumber;
  pic: PositionCacheStructOutput;
  operator: string;
  tip: BigNumber;
}
export type FillEvent = TypedEvent<
  [
    number,
    string,
    number,
    number,
    BigNumber,
    PositionCacheStructOutput,
    string,
    BigNumber
  ],
  FillEventObject
>;

export type FillEventFilter = TypedEventFilter<FillEvent>;

export interface FundingFeeEventObject {
  trader: string;
  funding: BigNumber;
}
export type FundingFeeEvent = TypedEvent<
  [string, BigNumber],
  FundingFeeEventObject
>;

export type FundingFeeEventFilter = TypedEventFilter<FundingFeeEvent>;

export interface LiquidateEventObject {
  expiry: number;
  trader: string;
  amount: BigNumber;
  mark: BigNumber;
  target: string;
  size: BigNumber;
}
export type LiquidateEvent = TypedEvent<
  [number, string, BigNumber, BigNumber, string, BigNumber],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface PlaceEventObject {
  expiry: number;
  trader: string;
  tick: number;
  nonce: number;
  order: OrderStructOutput;
}
export type PlaceEvent = TypedEvent<
  [number, string, number, number, OrderStructOutput],
  PlaceEventObject
>;

export type PlaceEventFilter = TypedEventFilter<PlaceEvent>;

export interface RecycleInsuranceFundEventObject {
  expiry: number;
  amount: BigNumber;
}
export type RecycleInsuranceFundEvent = TypedEvent<
  [number, BigNumber],
  RecycleInsuranceFundEventObject
>;

export type RecycleInsuranceFundEventFilter =
  TypedEventFilter<RecycleInsuranceFundEvent>;

export interface RemoveEventObject {
  expiry: number;
  trader: string;
  tickLower: number;
  tickUpper: number;
  fee: BigNumber;
  pic: PositionCacheStructOutput;
  operator: string;
  tip: BigNumber;
}
export type RemoveEvent = TypedEvent<
  [
    number,
    string,
    number,
    number,
    BigNumber,
    PositionCacheStructOutput,
    string,
    BigNumber
  ],
  RemoveEventObject
>;

export type RemoveEventFilter = TypedEventFilter<RemoveEvent>;

export interface SettleEventObject {
  expiry: number;
  trader: string;
  settlement: BigNumber;
  balance: BigNumber;
  operator: string;
}
export type SettleEvent = TypedEvent<
  [number, string, BigNumber, BigNumber, string],
  SettleEventObject
>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export interface SweepEventObject {
  expiry: number;
  trader: string;
  size: BigNumber;
  takenSize: BigNumber;
  takenValue: BigNumber;
  entryNotional: BigNumber;
  feeRatio: number;
  sqrtPX96: BigNumber;
  mark: BigNumber;
  operator: string;
}
export type SweepEvent = TypedEvent<
  [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string
  ],
  SweepEventObject
>;

export type SweepEventFilter = TypedEventFilter<SweepEvent>;

export interface TradeEventObject {
  expiry: number;
  trader: string;
  size: BigNumber;
  amount: BigNumber;
  takenSize: BigNumber;
  takenValue: BigNumber;
  entryNotional: BigNumber;
  feeRatio: number;
  sqrtPX96: BigNumber;
  mark: BigNumber;
}
export type TradeEvent = TypedEvent<
  [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber
  ],
  TradeEventObject
>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface UpdateAmmStatusEventObject {
  expiry: number;
  status: number;
  sqrtPX96: BigNumber;
  mark: BigNumber;
}
export type UpdateAmmStatusEvent = TypedEvent<
  [number, number, BigNumber, BigNumber],
  UpdateAmmStatusEventObject
>;

export type UpdateAmmStatusEventFilter = TypedEventFilter<UpdateAmmStatusEvent>;

export interface UpdateConditionEventObject {
  timestamp: number;
  condition: number;
}
export type UpdateConditionEvent = TypedEvent<
  [number, number],
  UpdateConditionEventObject
>;

export type UpdateConditionEventFilter = TypedEventFilter<UpdateConditionEvent>;

export interface UpdateFeeStateEventObject {
  expiry: number;
  feeIndex: BigNumber;
  protocolFee: BigNumber;
}
export type UpdateFeeStateEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  UpdateFeeStateEventObject
>;

export type UpdateFeeStateEventFilter = TypedEventFilter<UpdateFeeStateEvent>;

export interface UpdateFundingIndexEventObject {
  fundingIndex: BigNumber;
}
export type UpdateFundingIndexEvent = TypedEvent<
  [BigNumber],
  UpdateFundingIndexEventObject
>;

export type UpdateFundingIndexEventFilter =
  TypedEventFilter<UpdateFundingIndexEvent>;

export interface UpdateMarginRatioEventObject {
  initialMarginRatio: number;
  maintenanceMarginRatio: number;
}
export type UpdateMarginRatioEvent = TypedEvent<
  [number, number],
  UpdateMarginRatioEventObject
>;

export type UpdateMarginRatioEventFilter =
  TypedEventFilter<UpdateMarginRatioEvent>;

export interface UpdateParamEventObject {
  param: QuoteParamStructOutput;
}
export type UpdateParamEvent = TypedEvent<
  [QuoteParamStructOutput],
  UpdateParamEventObject
>;

export type UpdateParamEventFilter = TypedEventFilter<UpdateParamEvent>;

export interface UpdatePositionEventObject {
  expiry: number;
  trader: string;
  pic: PositionCacheStructOutput;
}
export type UpdatePositionEvent = TypedEvent<
  [number, string, PositionCacheStructOutput],
  UpdatePositionEventObject
>;

export type UpdatePositionEventFilter = TypedEventFilter<UpdatePositionEvent>;

export interface UpdateSocialLossInsuranceFundEventObject {
  expiry: number;
  longSocialLossIndex: BigNumber;
  shortSocialLossIndex: BigNumber;
  insuranceFund: BigNumber;
}
export type UpdateSocialLossInsuranceFundEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber],
  UpdateSocialLossInsuranceFundEventObject
>;

export type UpdateSocialLossInsuranceFundEventFilter =
  TypedEventFilter<UpdateSocialLossInsuranceFundEvent>;

export interface WithdrawRangeFeeEventObject {
  expiry: number;
  trader: string;
  rid: number;
  fee: BigNumber;
  operator: string;
  range: RangeStructOutput;
}
export type WithdrawRangeFeeEvent = TypedEvent<
  [number, string, number, BigNumber, string, RangeStructOutput],
  WithdrawRangeFeeEventObject
>;

export type WithdrawRangeFeeEventFilter =
  TypedEventFilter<WithdrawRangeFeeEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Instrument extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstrumentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchPlace(
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimProtocolFee(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimYield(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    condition(overrides?: CallOverrides): Promise<[number]>;

    configureYieldMode(
      yieldMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donateInsuranceFund(
      expiry: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fill(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freeze(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExpiries(overrides?: CallOverrides): Promise<[number[]]>;

    init(
      target: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    inquire(
      expiry: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[QuotationStructOutput]>;

    liquidate(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    normalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    place(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placePaused(overrides?: CallOverrides): Promise<[boolean]>;

    queryAccount(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      query: PromiseOrValue<BigNumberish>,
      inputs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    queryContext(
      expiry: PromiseOrValue<BigNumberish>,
      query: PromiseOrValue<BigNumberish>,
      offsets: PromiseOrValue<BigNumberish>[],
      inputs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    querySetting(
      offsets: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    recycleInsuranceFund(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolve(
      settlementPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLeverage(
      leverage: PromiseOrValue<BigNumberish>,
      maintenanceMarginRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlacePaused(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuoteParam(
      param: QuoteParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweep(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncPointsOperator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trade(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  add(
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchPlace(
    args: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    arg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimProtocolFee(
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimYield(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  condition(overrides?: CallOverrides): Promise<number>;

  configureYieldMode(
    yieldMode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donateInsuranceFund(
    expiry: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fill(
    arg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freeze(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExpiries(overrides?: CallOverrides): Promise<number[]>;

  init(
    target: PromiseOrValue<string>,
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  inquire(
    expiry: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<QuotationStructOutput>;

  liquidate(
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    size: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  normalize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  place(
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placePaused(overrides?: CallOverrides): Promise<boolean>;

  queryAccount(
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    query: PromiseOrValue<BigNumberish>,
    inputs: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  queryContext(
    expiry: PromiseOrValue<BigNumberish>,
    query: PromiseOrValue<BigNumberish>,
    offsets: PromiseOrValue<BigNumberish>[],
    inputs: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  querySetting(
    offsets: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  recycleInsuranceFund(
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove(
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolve(
    settlementPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLeverage(
    leverage: PromiseOrValue<BigNumberish>,
    maintenanceMarginRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlacePaused(
    paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuoteParam(
    param: QuoteParamStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle(
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweep(
    expiry: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncPointsOperator(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trade(
    args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<
      [number, number, RangeStructOutput] & {
        tickLower: number;
        tickUpper: number;
        range: RangeStructOutput;
      }
    >;

    batchPlace(
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: CallOverrides
    ): Promise<
      [number[], OrderStructOutput[]] & {
        nonces: number[];
        orders: OrderStructOutput[];
      }
    >;

    cancel(
      arg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean[], PositionCacheStructOutput[]] & {
        succees: boolean[];
        pics: PositionCacheStructOutput[];
      }
    >;

    claimProtocolFee(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimYield(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    condition(overrides?: CallOverrides): Promise<number>;

    configureYieldMode(
      yieldMode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    donateInsuranceFund(
      expiry: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fill(
      arg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PositionCacheStructOutput, BigNumber] & {
        pic: PositionCacheStructOutput;
        tip: BigNumber;
      }
    >;

    freeze(overrides?: CallOverrides): Promise<void>;

    getExpiries(overrides?: CallOverrides): Promise<number[]>;

    init(
      target: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<
      [number, number, RangeStructOutput] & {
        tickLower: number;
        tickUpper: number;
        range: RangeStructOutput;
      }
    >;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    inquire(
      expiry: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<QuotationStructOutput>;

    liquidate(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    normalize(overrides?: CallOverrides): Promise<void>;

    place(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<
      [number, OrderStructOutput] & { nonce: number; order: OrderStructOutput }
    >;

    placePaused(overrides?: CallOverrides): Promise<boolean>;

    queryAccount(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      query: PromiseOrValue<BigNumberish>,
      inputs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    queryContext(
      expiry: PromiseOrValue<BigNumberish>,
      query: PromiseOrValue<BigNumberish>,
      offsets: PromiseOrValue<BigNumberish>[],
      inputs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    querySetting(
      offsets: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    recycleInsuranceFund(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    remove(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<
      [PositionCacheStructOutput, BigNumber, BigNumber] & {
        pic: PositionCacheStructOutput;
        fee: BigNumber;
        tip: BigNumber;
      }
    >;

    resolve(
      settlementPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLeverage(
      leverage: PromiseOrValue<BigNumberish>,
      maintenanceMarginRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlacePaused(
      paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuoteParam(
      param: QuoteParamStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sweep(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    syncPointsOperator(overrides?: CallOverrides): Promise<void>;

    trade(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<PositionCacheStructOutput>;

    update(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Add(uint32,address,int24,int24,tuple)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      tickLower?: null,
      tickUpper?: null,
      range?: null
    ): AddEventFilter;
    Add(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      tickLower?: null,
      tickUpper?: null,
      range?: null
    ): AddEventFilter;

    "Adjust(uint32,address,int256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      net?: null
    ): AdjustEventFilter;
    Adjust(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      net?: null
    ): AdjustEventFilter;

    "Cancel(uint32,address,int24,uint32,uint256,tuple)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      tick?: null,
      nonce?: null,
      fee?: null,
      pic?: null
    ): CancelEventFilter;
    Cancel(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      tick?: null,
      nonce?: null,
      fee?: null,
      pic?: null
    ): CancelEventFilter;

    "ClaimProtocolFee(uint32,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ClaimProtocolFeeEventFilter;
    ClaimProtocolFee(
      expiry?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ClaimProtocolFeeEventFilter;

    "DeleteContext(uint32)"(
      expiry?: PromiseOrValue<BigNumberish> | null
    ): DeleteContextEventFilter;
    DeleteContext(
      expiry?: PromiseOrValue<BigNumberish> | null
    ): DeleteContextEventFilter;

    "DonateInsuranceFund(uint32,address,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      donator?: PromiseOrValue<string> | null,
      amount?: null
    ): DonateInsuranceFundEventFilter;
    DonateInsuranceFund(
      expiry?: PromiseOrValue<BigNumberish> | null,
      donator?: PromiseOrValue<string> | null,
      amount?: null
    ): DonateInsuranceFundEventFilter;

    "Fill(uint32,address,int24,uint32,uint256,tuple,address,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      tick?: null,
      nonce?: null,
      fee?: null,
      pic?: null,
      operator?: null,
      tip?: null
    ): FillEventFilter;
    Fill(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      tick?: null,
      nonce?: null,
      fee?: null,
      pic?: null,
      operator?: null,
      tip?: null
    ): FillEventFilter;

    "FundingFee(address,int256)"(
      trader?: PromiseOrValue<string> | null,
      funding?: null
    ): FundingFeeEventFilter;
    FundingFee(
      trader?: PromiseOrValue<string> | null,
      funding?: null
    ): FundingFeeEventFilter;

    "Liquidate(uint32,address,uint256,uint256,address,int256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null,
      mark?: null,
      target?: null,
      size?: null
    ): LiquidateEventFilter;
    Liquidate(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null,
      mark?: null,
      target?: null,
      size?: null
    ): LiquidateEventFilter;

    "Place(uint32,address,int24,uint32,tuple)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      tick?: null,
      nonce?: null,
      order?: null
    ): PlaceEventFilter;
    Place(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      tick?: null,
      nonce?: null,
      order?: null
    ): PlaceEventFilter;

    "RecycleInsuranceFund(uint32,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RecycleInsuranceFundEventFilter;
    RecycleInsuranceFund(
      expiry?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RecycleInsuranceFundEventFilter;

    "Remove(uint32,address,int24,int24,uint256,tuple,address,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      tickLower?: null,
      tickUpper?: null,
      fee?: null,
      pic?: null,
      operator?: null,
      tip?: null
    ): RemoveEventFilter;
    Remove(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      tickLower?: null,
      tickUpper?: null,
      fee?: null,
      pic?: null,
      operator?: null,
      tip?: null
    ): RemoveEventFilter;

    "Settle(uint32,address,uint256,uint256,address)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      settlement?: null,
      balance?: null,
      operator?: null
    ): SettleEventFilter;
    Settle(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      settlement?: null,
      balance?: null,
      operator?: null
    ): SettleEventFilter;

    "Sweep(uint32,address,int256,int256,uint256,uint256,uint16,uint160,uint256,address)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      size?: null,
      takenSize?: null,
      takenValue?: null,
      entryNotional?: null,
      feeRatio?: null,
      sqrtPX96?: null,
      mark?: null,
      operator?: null
    ): SweepEventFilter;
    Sweep(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      size?: null,
      takenSize?: null,
      takenValue?: null,
      entryNotional?: null,
      feeRatio?: null,
      sqrtPX96?: null,
      mark?: null,
      operator?: null
    ): SweepEventFilter;

    "Trade(uint32,address,int256,uint256,int256,uint256,uint256,uint16,uint160,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      size?: null,
      amount?: null,
      takenSize?: null,
      takenValue?: null,
      entryNotional?: null,
      feeRatio?: null,
      sqrtPX96?: null,
      mark?: null
    ): TradeEventFilter;
    Trade(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      size?: null,
      amount?: null,
      takenSize?: null,
      takenValue?: null,
      entryNotional?: null,
      feeRatio?: null,
      sqrtPX96?: null,
      mark?: null
    ): TradeEventFilter;

    "UpdateAmmStatus(uint32,uint8,uint160,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      status?: null,
      sqrtPX96?: null,
      mark?: null
    ): UpdateAmmStatusEventFilter;
    UpdateAmmStatus(
      expiry?: PromiseOrValue<BigNumberish> | null,
      status?: null,
      sqrtPX96?: null,
      mark?: null
    ): UpdateAmmStatusEventFilter;

    "UpdateCondition(uint32,uint8)"(
      timestamp?: null,
      condition?: null
    ): UpdateConditionEventFilter;
    UpdateCondition(
      timestamp?: null,
      condition?: null
    ): UpdateConditionEventFilter;

    "UpdateFeeState(uint32,uint128,uint128)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      feeIndex?: null,
      protocolFee?: null
    ): UpdateFeeStateEventFilter;
    UpdateFeeState(
      expiry?: PromiseOrValue<BigNumberish> | null,
      feeIndex?: null,
      protocolFee?: null
    ): UpdateFeeStateEventFilter;

    "UpdateFundingIndex(uint256)"(
      fundingIndex?: null
    ): UpdateFundingIndexEventFilter;
    UpdateFundingIndex(fundingIndex?: null): UpdateFundingIndexEventFilter;

    "UpdateMarginRatio(uint16,uint16)"(
      initialMarginRatio?: null,
      maintenanceMarginRatio?: null
    ): UpdateMarginRatioEventFilter;
    UpdateMarginRatio(
      initialMarginRatio?: null,
      maintenanceMarginRatio?: null
    ): UpdateMarginRatioEventFilter;

    "UpdateParam(tuple)"(param?: null): UpdateParamEventFilter;
    UpdateParam(param?: null): UpdateParamEventFilter;

    "UpdatePosition(uint32,address,tuple)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      pic?: null
    ): UpdatePositionEventFilter;
    UpdatePosition(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      pic?: null
    ): UpdatePositionEventFilter;

    "UpdateSocialLossInsuranceFund(uint32,uint128,uint128,uint128)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      longSocialLossIndex?: null,
      shortSocialLossIndex?: null,
      insuranceFund?: null
    ): UpdateSocialLossInsuranceFundEventFilter;
    UpdateSocialLossInsuranceFund(
      expiry?: PromiseOrValue<BigNumberish> | null,
      longSocialLossIndex?: null,
      shortSocialLossIndex?: null,
      insuranceFund?: null
    ): UpdateSocialLossInsuranceFundEventFilter;

    "WithdrawRangeFee(uint32,address,uint48,uint256,address,tuple)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      rid?: null,
      fee?: null,
      operator?: null,
      range?: null
    ): WithdrawRangeFeeEventFilter;
    WithdrawRangeFee(
      expiry?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      rid?: null,
      fee?: null,
      operator?: null,
      range?: null
    ): WithdrawRangeFeeEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    add(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchPlace(
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimProtocolFee(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimYield(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    condition(overrides?: CallOverrides): Promise<BigNumber>;

    configureYieldMode(
      yieldMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donateInsuranceFund(
      expiry: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fill(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freeze(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExpiries(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      target: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    inquire(
      expiry: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    normalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    place(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placePaused(overrides?: CallOverrides): Promise<BigNumber>;

    queryAccount(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      query: PromiseOrValue<BigNumberish>,
      inputs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryContext(
      expiry: PromiseOrValue<BigNumberish>,
      query: PromiseOrValue<BigNumberish>,
      offsets: PromiseOrValue<BigNumberish>[],
      inputs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    querySetting(
      offsets: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recycleInsuranceFund(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolve(
      settlementPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLeverage(
      leverage: PromiseOrValue<BigNumberish>,
      maintenanceMarginRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlacePaused(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuoteParam(
      param: QuoteParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweep(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncPointsOperator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trade(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchPlace(
      args: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimProtocolFee(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimYield(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    condition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configureYieldMode(
      yieldMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donateInsuranceFund(
      expiry: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fill(
      arg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freeze(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExpiries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      target: PromiseOrValue<string>,
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    inquire(
      expiry: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    normalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    place(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placePaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryAccount(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      query: PromiseOrValue<BigNumberish>,
      inputs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryContext(
      expiry: PromiseOrValue<BigNumberish>,
      query: PromiseOrValue<BigNumberish>,
      offsets: PromiseOrValue<BigNumberish>[],
      inputs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    querySetting(
      offsets: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recycleInsuranceFund(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      settlementPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLeverage(
      leverage: PromiseOrValue<BigNumberish>,
      maintenanceMarginRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlacePaused(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuoteParam(
      param: QuoteParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      expiry: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncPointsOperator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trade(
      args: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
