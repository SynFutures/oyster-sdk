/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type PriceFeederStruct = {
  ftype: PromiseOrValue<BigNumberish>;
  scaler0: PromiseOrValue<BigNumberish>;
  aggregator0: PromiseOrValue<string>;
  heartBeat0: PromiseOrValue<BigNumberish>;
  scaler1: PromiseOrValue<BigNumberish>;
  aggregator1: PromiseOrValue<string>;
  heartBeat1: PromiseOrValue<BigNumberish>;
};

export type PriceFeederStructOutput = [
  number,
  BigNumber,
  string,
  number,
  BigNumber,
  string,
  number
] & {
  ftype: number;
  scaler0: BigNumber;
  aggregator0: string;
  heartBeat0: number;
  scaler1: BigNumber;
  aggregator1: string;
  heartBeat1: number;
};

export type QuoteParamStruct = {
  minMarginAmount: PromiseOrValue<BigNumberish>;
  tradingFeeRatio: PromiseOrValue<BigNumberish>;
  protocolFeeRatio: PromiseOrValue<BigNumberish>;
  stabilityFeeRatioParam: PromiseOrValue<BigNumberish>;
  qtype: PromiseOrValue<BigNumberish>;
  tip: PromiseOrValue<BigNumberish>;
};

export type QuoteParamStructOutput = [
  BigNumber,
  number,
  number,
  BigNumber,
  number,
  BigNumber
] & {
  minMarginAmount: BigNumber;
  tradingFeeRatio: number;
  protocolFeeRatio: number;
  stabilityFeeRatioParam: BigNumber;
  qtype: number;
  tip: BigNumber;
};

export interface GuardianInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "GAS_CLAIMER_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "YIELD_CLAIMER_ROLE()": FunctionFragment;
    "addDexV2Factory(address)": FunctionFragment;
    "blastFeeTo()": FunctionFragment;
    "blastYieldTo()": FunctionFragment;
    "claimAllGas(address[])": FunctionFragment;
    "claimGasAtMinClaimRate(address[],uint256)": FunctionFragment;
    "claimMaxGas(address[])": FunctionFragment;
    "claimProtocolFee(address[],uint32[])": FunctionFragment;
    "claimYield(address)": FunctionFragment;
    "config()": FunctionFragment;
    "configureYieldMode(address,uint8)": FunctionFragment;
    "disableLiquidatorWhitelist()": FunctionFragment;
    "disableLpWhitelist()": FunctionFragment;
    "emergingFeederFactory()": FunctionFragment;
    "enableLpWhitelistForQuote(address,bool)": FunctionFragment;
    "freeze(address[])": FunctionFragment;
    "gate()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantEmergingFeederFactoryOperator(address[])": FunctionFragment;
    "grantPythFeederFactoryOperator(address[])": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address[],address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "normalize(address[])": FunctionFragment;
    "pythFeederFactory()": FunctionFragment;
    "readGasParams(address[])": FunctionFragment;
    "readYieldClaimableAmount(address[],address)": FunctionFragment;
    "recycleInsuranceFund(address[],uint32[])": FunctionFragment;
    "release(address[],address[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resolve(address[],uint128[])": FunctionFragment;
    "revokeEmergingFeederFactoryOperator(address[])": FunctionFragment;
    "revokePythFeederFactoryOperator(address[])": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBlacklist(address[],bool[])": FunctionFragment;
    "setBlastFeeToAddress(address)": FunctionFragment;
    "setBlastPointsAddress(address)": FunctionFragment;
    "setBlastPointsOperator(address)": FunctionFragment;
    "setBlastYieldToAddress(address)": FunctionFragment;
    "setCexMarketPriceFeeder(string,address[],(uint8,uint64,address,uint24,uint64,address,uint24)[])": FunctionFragment;
    "setCompactEmaParam(string,uint256)": FunctionFragment;
    "setConfigAndGateAddress(address,address)": FunctionFragment;
    "setConfigQuoteParam(address[],(uint128,uint16,uint16,uint64,uint8,uint128)[])": FunctionFragment;
    "setEmergingFeederFactoryAddress(address)": FunctionFragment;
    "setInstrumentLeverage(address[],uint8[],uint16[])": FunctionFragment;
    "setInstrumentQuoteParam(address[],(uint128,uint16,uint16,uint64,uint8,uint128)[])": FunctionFragment;
    "setLiquidatorWhitelist(address[],bool[])": FunctionFragment;
    "setLpWhiteList(address[],address[],bool[])": FunctionFragment;
    "setMarketInfo(string,address,address)": FunctionFragment;
    "setPendingDuration(uint256)": FunctionFragment;
    "setPlacePaused(address[],bool[])": FunctionFragment;
    "setPythFeederFactoryAddress(address)": FunctionFragment;
    "setPythFeederId(bytes32,bytes32)": FunctionFragment;
    "setSynFuturesV3Admin(address)": FunctionFragment;
    "setThreshold(address[],uint256[])": FunctionFragment;
    "setToAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "syncPointsOperator()": FunctionFragment;
    "to()": FunctionFragment;
    "transferEmergingFeederFactoryAdmin(address)": FunctionFragment;
    "transferPythFeederFactoryAdmin(address)": FunctionFragment;
    "withdrawFromGate(address[],uint256[])": FunctionFragment;
    "withdrawFromGuardian(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "GAS_CLAIMER_ROLE"
      | "OPERATOR_ROLE"
      | "YIELD_CLAIMER_ROLE"
      | "addDexV2Factory"
      | "blastFeeTo"
      | "blastYieldTo"
      | "claimAllGas"
      | "claimGasAtMinClaimRate"
      | "claimMaxGas"
      | "claimProtocolFee"
      | "claimYield"
      | "config"
      | "configureYieldMode"
      | "disableLiquidatorWhitelist"
      | "disableLpWhitelist"
      | "emergingFeederFactory"
      | "enableLpWhitelistForQuote"
      | "freeze"
      | "gate"
      | "getRoleAdmin"
      | "grantEmergingFeederFactoryOperator"
      | "grantPythFeederFactoryOperator"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "multicall"
      | "normalize"
      | "pythFeederFactory"
      | "readGasParams"
      | "readYieldClaimableAmount"
      | "recycleInsuranceFund"
      | "release"
      | "renounceRole"
      | "resolve"
      | "revokeEmergingFeederFactoryOperator"
      | "revokePythFeederFactoryOperator"
      | "revokeRole"
      | "setBlacklist"
      | "setBlastFeeToAddress"
      | "setBlastPointsAddress"
      | "setBlastPointsOperator"
      | "setBlastYieldToAddress"
      | "setCexMarketPriceFeeder"
      | "setCompactEmaParam"
      | "setConfigAndGateAddress"
      | "setConfigQuoteParam"
      | "setEmergingFeederFactoryAddress"
      | "setInstrumentLeverage"
      | "setInstrumentQuoteParam"
      | "setLiquidatorWhitelist"
      | "setLpWhiteList"
      | "setMarketInfo"
      | "setPendingDuration"
      | "setPlacePaused"
      | "setPythFeederFactoryAddress"
      | "setPythFeederId"
      | "setSynFuturesV3Admin"
      | "setThreshold"
      | "setToAddress"
      | "supportsInterface"
      | "syncPointsOperator"
      | "to"
      | "transferEmergingFeederFactoryAdmin"
      | "transferPythFeederFactoryAdmin"
      | "withdrawFromGate"
      | "withdrawFromGuardian"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GAS_CLAIMER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YIELD_CLAIMER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDexV2Factory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blastFeeTo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blastYieldTo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllGas",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGasAtMinClaimRate",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMaxGas",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimProtocolFee",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYield",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "configureYieldMode",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableLiquidatorWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableLpWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergingFeederFactory",
    values?: undefined
  ): string;

  encodeFunctionData(
    functionFragment: "enableLpWhitelistForQuote",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "freeze",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "gate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantEmergingFeederFactoryOperator",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPythFeederFactoryOperator",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "normalize",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pythFeederFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readGasParams",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "readYieldClaimableAmount",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recycleInsuranceFund",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEmergingFeederFactoryOperator",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePythFeederFactoryOperator",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlacklist",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlastFeeToAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlastPointsAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlastPointsOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlastYieldToAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCexMarketPriceFeeder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PriceFeederStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompactEmaParam",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfigAndGateAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfigQuoteParam",
    values: [PromiseOrValue<string>[], QuoteParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergingFeederFactoryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstrumentLeverage",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstrumentQuoteParam",
    values: [PromiseOrValue<string>[], QuoteParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidatorWhitelist",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLpWhiteList",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlacePaused",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPythFeederFactoryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPythFeederId",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSynFuturesV3Admin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setToAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "syncPointsOperator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "to", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferEmergingFeederFactoryAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPythFeederFactoryAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromGate",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromGuardian",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GAS_CLAIMER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "YIELD_CLAIMER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDexV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blastFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blastYieldTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGasAtMinClaimRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMaxGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimYield", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureYieldMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableLiquidatorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableLpWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergingFeederFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableLpWhitelistForQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantEmergingFeederFactoryOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPythFeederFactoryOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "normalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pythFeederFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readGasParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readYieldClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recycleInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeEmergingFeederFactoryOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePythFeederFactoryOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlastFeeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlastPointsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlastPointsOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlastYieldToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCexMarketPriceFeeder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompactEmaParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfigAndGateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfigQuoteParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergingFeederFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstrumentLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstrumentQuoteParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidatorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLpWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlacePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPythFeederFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPythFeederId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSynFuturesV3Admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncPointsOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "to", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferEmergingFeederFactoryAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPythFeederFactoryAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromGate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromGuardian",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetBlastFeeToAddress(address)": EventFragment;
    "SetBlastYieldToAddress(address)": EventFragment;
    "SetToAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBlastFeeToAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBlastYieldToAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetToAddress"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetBlastFeeToAddressEventObject {
  blastFeeTo: string;
}
export type SetBlastFeeToAddressEvent = TypedEvent<
  [string],
  SetBlastFeeToAddressEventObject
>;

export type SetBlastFeeToAddressEventFilter =
  TypedEventFilter<SetBlastFeeToAddressEvent>;

export interface SetBlastYieldToAddressEventObject {
  blastYieldTo: string;
}
export type SetBlastYieldToAddressEvent = TypedEvent<
  [string],
  SetBlastYieldToAddressEventObject
>;

export type SetBlastYieldToAddressEventFilter =
  TypedEventFilter<SetBlastYieldToAddressEvent>;

export interface SetToAddressEventObject {
  to: string;
}
export type SetToAddressEvent = TypedEvent<[string], SetToAddressEventObject>;

export type SetToAddressEventFilter = TypedEventFilter<SetToAddressEvent>;

export interface Guardian extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GuardianInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GAS_CLAIMER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    YIELD_CLAIMER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addDexV2Factory(
      dexV2Factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blastFeeTo(overrides?: CallOverrides): Promise<[string]>;

    blastYieldTo(overrides?: CallOverrides): Promise<[string]>;

    claimAllGas(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimGasAtMinClaimRate(
      contractAddresses: PromiseOrValue<string>[],
      minClaimRateBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMaxGas(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimProtocolFee(
      instruments: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimYield(
      quote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    config(overrides?: CallOverrides): Promise<[string]>;

    configureYieldMode(
      quote: PromiseOrValue<string>,
      yieldMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableLiquidatorWhitelist(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableLpWhitelist(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergingFeederFactory(overrides?: CallOverrides): Promise<[string]>;

    enableLpWhitelistForQuote(
      quote: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freeze(
      instruments: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gate(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantEmergingFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantPythFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _admin: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    normalize(
      instruments: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pythFeederFactory(overrides?: CallOverrides): Promise<[string]>;

    readGasParams(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], number[]] & {
        etherSeconds: BigNumber[];
        etherBalance: BigNumber[];
        lastUpdated: BigNumber[];
        gasModes: number[];
      }
    >;

    readYieldClaimableAmount(
      contractAddresses: PromiseOrValue<string>[],
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { claimable: BigNumber[] }>;

    recycleInsuranceFund(
      instruments: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    release(
      quotes: PromiseOrValue<string>[],
      traders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolve(
      instruments: PromiseOrValue<string>[],
      settlementPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeEmergingFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokePythFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlacklist(
      traders: PromiseOrValue<string>[],
      banned: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlastFeeToAddress(
      _blastFeeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlastPointsAddress(
      pointsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlastPointsOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlastYieldToAddress(
      _blastYieldTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCexMarketPriceFeeder(
      marketType: PromiseOrValue<string>,
      instruments: PromiseOrValue<string>[],
      priceFeeders: PriceFeederStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCompactEmaParam(
      marketType: PromiseOrValue<string>,
      newCompactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfigAndGateAddress(
      _config: PromiseOrValue<string>,
      _gate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfigQuoteParam(
      coins: PromiseOrValue<string>[],
      params: QuoteParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEmergingFeederFactoryAddress(
      _emergingFeederFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInstrumentLeverage(
      instruments: PromiseOrValue<string>[],
      leverages: PromiseOrValue<BigNumberish>[],
      mmrs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInstrumentQuoteParam(
      instruments: PromiseOrValue<string>[],
      params: QuoteParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidatorWhitelist(
      users: PromiseOrValue<string>[],
      flags: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLpWhiteList(
      quotes: PromiseOrValue<string>[],
      users: PromiseOrValue<string>[],
      flags: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketInfo(
      mtype: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      beacon: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlacePaused(
      instruments: PromiseOrValue<string>[],
      params: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPythFeederFactoryAddress(
      _pythFeederFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPythFeederId(
      baseIndex: PromiseOrValue<BytesLike>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSynFuturesV3Admin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      quotes: PromiseOrValue<string>[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToAddress(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    syncPointsOperator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    to(overrides?: CallOverrides): Promise<[string]>;

    transferEmergingFeederFactoryAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferPythFeederFactoryAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromGate(
      quotes: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromGuardian(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GAS_CLAIMER_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  YIELD_CLAIMER_ROLE(overrides?: CallOverrides): Promise<string>;

  addDexV2Factory(
    dexV2Factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blastFeeTo(overrides?: CallOverrides): Promise<string>;

  blastYieldTo(overrides?: CallOverrides): Promise<string>;

  claimAllGas(
    contractAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimGasAtMinClaimRate(
    contractAddresses: PromiseOrValue<string>[],
    minClaimRateBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMaxGas(
    contractAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimProtocolFee(
    instruments: PromiseOrValue<string>[],
    expiries: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimYield(
    quote: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  config(overrides?: CallOverrides): Promise<string>;

  configureYieldMode(
    quote: PromiseOrValue<string>,
    yieldMode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableLiquidatorWhitelist(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableLpWhitelist(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergingFeederFactory(overrides?: CallOverrides): Promise<string>;

  enableLpWhitelistForQuote(
    quote: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freeze(
    instruments: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gate(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantEmergingFeederFactoryOperator(
    operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantPythFeederFactoryOperator(
    operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _admin: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  normalize(
    instruments: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pythFeederFactory(overrides?: CallOverrides): Promise<string>;

  readGasParams(
    contractAddresses: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], number[]] & {
      etherSeconds: BigNumber[];
      etherBalance: BigNumber[];
      lastUpdated: BigNumber[];
      gasModes: number[];
    }
  >;

  readYieldClaimableAmount(
    contractAddresses: PromiseOrValue<string>[],
    quote: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  recycleInsuranceFund(
    instruments: PromiseOrValue<string>[],
    expiries: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  release(
    quotes: PromiseOrValue<string>[],
    traders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolve(
    instruments: PromiseOrValue<string>[],
    settlementPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeEmergingFeederFactoryOperator(
    operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokePythFeederFactoryOperator(
    operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlacklist(
    traders: PromiseOrValue<string>[],
    banned: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlastFeeToAddress(
    _blastFeeTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlastPointsAddress(
    pointsAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlastPointsOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlastYieldToAddress(
    _blastYieldTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCexMarketPriceFeeder(
    marketType: PromiseOrValue<string>,
    instruments: PromiseOrValue<string>[],
    priceFeeders: PriceFeederStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCompactEmaParam(
    marketType: PromiseOrValue<string>,
    newCompactEmaParam: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfigAndGateAddress(
    _config: PromiseOrValue<string>,
    _gate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfigQuoteParam(
    coins: PromiseOrValue<string>[],
    params: QuoteParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEmergingFeederFactoryAddress(
    _emergingFeederFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInstrumentLeverage(
    instruments: PromiseOrValue<string>[],
    leverages: PromiseOrValue<BigNumberish>[],
    mmrs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInstrumentQuoteParam(
    instruments: PromiseOrValue<string>[],
    params: QuoteParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidatorWhitelist(
    users: PromiseOrValue<string>[],
    flags: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLpWhiteList(
    users: PromiseOrValue<string>[],
    flags: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketInfo(
    mtype: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    beacon: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingDuration(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlacePaused(
    instruments: PromiseOrValue<string>[],
    params: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPythFeederFactoryAddress(
    _pythFeederFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPythFeederId(
    baseIndex: PromiseOrValue<BytesLike>,
    _id: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSynFuturesV3Admin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    quotes: PromiseOrValue<string>[],
    thresholds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToAddress(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  syncPointsOperator(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  to(overrides?: CallOverrides): Promise<string>;

  transferEmergingFeederFactoryAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferPythFeederFactoryAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromGate(
    quotes: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromGuardian(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GAS_CLAIMER_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    YIELD_CLAIMER_ROLE(overrides?: CallOverrides): Promise<string>;

    addDexV2Factory(
      dexV2Factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    blastFeeTo(overrides?: CallOverrides): Promise<string>;

    blastYieldTo(overrides?: CallOverrides): Promise<string>;

    claimAllGas(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimGasAtMinClaimRate(
      contractAddresses: PromiseOrValue<string>[],
      minClaimRateBips: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMaxGas(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimProtocolFee(
      instruments: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimYield(
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    config(overrides?: CallOverrides): Promise<string>;

    configureYieldMode(
      quote: PromiseOrValue<string>,
      yieldMode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableLiquidatorWhitelist(overrides?: CallOverrides): Promise<void>;

    disableLpWhitelist(overrides?: CallOverrides): Promise<void>;

    emergingFeederFactory(overrides?: CallOverrides): Promise<string>;

    enableLpWhitelistForQuote(
      quote: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    freeze(
      instruments: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    gate(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantEmergingFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    grantPythFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _admin: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    normalize(
      instruments: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pythFeederFactory(overrides?: CallOverrides): Promise<string>;

    readGasParams(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], number[]] & {
        etherSeconds: BigNumber[];
        etherBalance: BigNumber[];
        lastUpdated: BigNumber[];
        gasModes: number[];
      }
    >;

    readYieldClaimableAmount(
      contractAddresses: PromiseOrValue<string>[],
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    recycleInsuranceFund(
      instruments: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    release(
      quotes: PromiseOrValue<string>[],
      traders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolve(
      instruments: PromiseOrValue<string>[],
      settlementPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeEmergingFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokePythFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlacklist(
      traders: PromiseOrValue<string>[],
      banned: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBlastFeeToAddress(
      _blastFeeTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlastPointsAddress(
      pointsAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlastPointsOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlastYieldToAddress(
      _blastYieldTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCexMarketPriceFeeder(
      marketType: PromiseOrValue<string>,
      instruments: PromiseOrValue<string>[],
      priceFeeders: PriceFeederStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCompactEmaParam(
      marketType: PromiseOrValue<string>,
      newCompactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfigAndGateAddress(
      _config: PromiseOrValue<string>,
      _gate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfigQuoteParam(
      coins: PromiseOrValue<string>[],
      params: QuoteParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergingFeederFactoryAddress(
      _emergingFeederFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInstrumentLeverage(
      instruments: PromiseOrValue<string>[],
      leverages: PromiseOrValue<BigNumberish>[],
      mmrs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setInstrumentQuoteParam(
      instruments: PromiseOrValue<string>[],
      params: QuoteParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidatorWhitelist(
      users: PromiseOrValue<string>[],
      flags: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLpWhiteList(
      quotes: PromiseOrValue<string>[],
      users: PromiseOrValue<string>[],
      flags: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketInfo(
      mtype: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      beacon: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlacePaused(
      instruments: PromiseOrValue<string>[],
      params: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPythFeederFactoryAddress(
      _pythFeederFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPythFeederId(
      baseIndex: PromiseOrValue<BytesLike>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSynFuturesV3Admin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      quotes: PromiseOrValue<string>[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setToAddress(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    syncPointsOperator(overrides?: CallOverrides): Promise<void>;

    to(overrides?: CallOverrides): Promise<string>;

    transferEmergingFeederFactoryAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPythFeederFactoryAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromGate(
      quotes: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromGuardian(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetBlastFeeToAddress(address)"(
      blastFeeTo?: null
    ): SetBlastFeeToAddressEventFilter;
    SetBlastFeeToAddress(blastFeeTo?: null): SetBlastFeeToAddressEventFilter;

    "SetBlastYieldToAddress(address)"(
      blastYieldTo?: null
    ): SetBlastYieldToAddressEventFilter;
    SetBlastYieldToAddress(
      blastYieldTo?: null
    ): SetBlastYieldToAddressEventFilter;

    "SetToAddress(address)"(to?: null): SetToAddressEventFilter;
    SetToAddress(to?: null): SetToAddressEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GAS_CLAIMER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    YIELD_CLAIMER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addDexV2Factory(
      dexV2Factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blastFeeTo(overrides?: CallOverrides): Promise<BigNumber>;

    blastYieldTo(overrides?: CallOverrides): Promise<BigNumber>;

    claimAllGas(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimGasAtMinClaimRate(
      contractAddresses: PromiseOrValue<string>[],
      minClaimRateBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMaxGas(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimProtocolFee(
      instruments: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimYield(
      quote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    configureYieldMode(
      quote: PromiseOrValue<string>,
      yieldMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableLiquidatorWhitelist(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableLpWhitelist(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergingFeederFactory(overrides?: CallOverrides): Promise<BigNumber>;

    enableLpWhitelistForQuote(
      quote: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freeze(
      instruments: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gate(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantEmergingFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantPythFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    normalize(
      instruments: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pythFeederFactory(overrides?: CallOverrides): Promise<BigNumber>;

    readGasParams(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readYieldClaimableAmount(
      contractAddresses: PromiseOrValue<string>[],
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recycleInsuranceFund(
      instruments: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    release(
      quotes: PromiseOrValue<string>[],
      traders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolve(
      instruments: PromiseOrValue<string>[],
      settlementPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeEmergingFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokePythFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlacklist(
      traders: PromiseOrValue<string>[],
      banned: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlastFeeToAddress(
      _blastFeeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlastPointsAddress(
      pointsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlastPointsOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlastYieldToAddress(
      _blastYieldTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCexMarketPriceFeeder(
      marketType: PromiseOrValue<string>,
      instruments: PromiseOrValue<string>[],
      priceFeeders: PriceFeederStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCompactEmaParam(
      marketType: PromiseOrValue<string>,
      newCompactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfigAndGateAddress(
      _config: PromiseOrValue<string>,
      _gate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfigQuoteParam(
      coins: PromiseOrValue<string>[],
      params: QuoteParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEmergingFeederFactoryAddress(
      _emergingFeederFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInstrumentLeverage(
      instruments: PromiseOrValue<string>[],
      leverages: PromiseOrValue<BigNumberish>[],
      mmrs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInstrumentQuoteParam(
      instruments: PromiseOrValue<string>[],
      params: QuoteParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidatorWhitelist(
      users: PromiseOrValue<string>[],
      flags: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLpWhiteList(
      quotes: PromiseOrValue<string>[],
      users: PromiseOrValue<string>[],
      flags: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketInfo(
      mtype: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      beacon: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlacePaused(
      instruments: PromiseOrValue<string>[],
      params: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPythFeederFactoryAddress(
      _pythFeederFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPythFeederId(
      baseIndex: PromiseOrValue<BytesLike>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSynFuturesV3Admin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setThreshold(
      quotes: PromiseOrValue<string>[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToAddress(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncPointsOperator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    to(overrides?: CallOverrides): Promise<BigNumber>;

    transferEmergingFeederFactoryAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferPythFeederFactoryAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromGate(
      quotes: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromGuardian(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GAS_CLAIMER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YIELD_CLAIMER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addDexV2Factory(
      dexV2Factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blastFeeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blastYieldTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAllGas(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimGasAtMinClaimRate(
      contractAddresses: PromiseOrValue<string>[],
      minClaimRateBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMaxGas(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimProtocolFee(
      instruments: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimYield(
      quote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configureYieldMode(
      quote: PromiseOrValue<string>,
      yieldMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableLiquidatorWhitelist(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableLpWhitelist(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergingFeederFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableLpWhitelistForQuote(
      quote: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freeze(
      instruments: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantEmergingFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantPythFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    normalize(
      instruments: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pythFeederFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readGasParams(
      contractAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readYieldClaimableAmount(
      contractAddresses: PromiseOrValue<string>[],
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recycleInsuranceFund(
      instruments: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    release(
      quotes: PromiseOrValue<string>[],
      traders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      instruments: PromiseOrValue<string>[],
      settlementPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeEmergingFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokePythFeederFactoryOperator(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlacklist(
      traders: PromiseOrValue<string>[],
      banned: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlastFeeToAddress(
      _blastFeeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlastPointsAddress(
      pointsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlastPointsOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlastYieldToAddress(
      _blastYieldTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCexMarketPriceFeeder(
      marketType: PromiseOrValue<string>,
      instruments: PromiseOrValue<string>[],
      priceFeeders: PriceFeederStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCompactEmaParam(
      marketType: PromiseOrValue<string>,
      newCompactEmaParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfigAndGateAddress(
      _config: PromiseOrValue<string>,
      _gate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfigQuoteParam(
      coins: PromiseOrValue<string>[],
      params: QuoteParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEmergingFeederFactoryAddress(
      _emergingFeederFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInstrumentLeverage(
      instruments: PromiseOrValue<string>[],
      leverages: PromiseOrValue<BigNumberish>[],
      mmrs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInstrumentQuoteParam(
      instruments: PromiseOrValue<string>[],
      params: QuoteParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidatorWhitelist(
      users: PromiseOrValue<string>[],
      flags: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLpWhiteList(
      quotes: PromiseOrValue<string>[],
      users: PromiseOrValue<string>[],
      flags: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketInfo(
      mtype: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      beacon: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlacePaused(
      instruments: PromiseOrValue<string>[],
      params: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPythFeederFactoryAddress(
      _pythFeederFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPythFeederId(
      baseIndex: PromiseOrValue<BytesLike>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSynFuturesV3Admin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      quotes: PromiseOrValue<string>[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToAddress(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    syncPointsOperator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    to(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferEmergingFeederFactoryAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferPythFeederFactoryAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromGate(
      quotes: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromGuardian(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
