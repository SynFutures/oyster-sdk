/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PythFeederFactoryInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "allFeeders(uint256)": FunctionFragment;
    "baseIndexToFeeder(bytes32)": FunctionFragment;
    "batchCreateFeeder(bytes32[],bytes32[])": FunctionFragment;
    "batchGetPrice(bytes32[])": FunctionFragment;
    "beacon()": FunctionFragment;
    "createFeeder(bytes32,bytes32)": FunctionFragment;
    "feederToBaseIndex(address)": FunctionFragment;
    "getAllFeeders()": FunctionFragment;
    "getAllFeedersLength()": FunctionFragment;
    "getAllIndexes()": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "guardian()": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address[])": FunctionFragment;
    "pyth()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setPythFeederId(bytes32,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "allFeeders"
      | "baseIndexToFeeder"
      | "batchCreateFeeder"
      | "batchGetPrice"
      | "beacon"
      | "createFeeder"
      | "feederToBaseIndex"
      | "getAllFeeders"
      | "getAllFeedersLength"
      | "getAllIndexes"
      | "getPrice"
      | "getRoleAdmin"
      | "grantRole"
      | "guardian"
      | "hasRole"
      | "initialize"
      | "pyth"
      | "renounceRole"
      | "revokeRole"
      | "setPythFeederId"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allFeeders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseIndexToFeeder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCreateFeeder",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetPrice",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "beacon", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createFeeder",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "feederToBaseIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFeeders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFeedersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllIndexes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "pyth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPythFeederId",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allFeeders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseIndexToFeeder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCreateFeeder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createFeeder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feederToBaseIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFeeders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFeedersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pyth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPythFeederId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "FeederCreated(address,bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetPythAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeederCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPythAddress"): EventFragment;
}

export interface FeederCreatedEventObject {
  feeder: string;
  symbolHash: string;
}
export type FeederCreatedEvent = TypedEvent<
  [string, string],
  FeederCreatedEventObject
>;

export type FeederCreatedEventFilter = TypedEventFilter<FeederCreatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetPythAddressEventObject {
  pyth: string;
}
export type SetPythAddressEvent = TypedEvent<
  [string],
  SetPythAddressEventObject
>;

export type SetPythAddressEventFilter = TypedEventFilter<SetPythAddressEvent>;

export interface PythFeederFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PythFeederFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    allFeeders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    baseIndexToFeeder(
      baseIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { feeder: string }>;

    batchCreateFeeder(
      baseIndexes: PromiseOrValue<BytesLike>[],
      ids: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchGetPrice(
      baseIndexes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], number[]] & { prices: BigNumber[]; timestamps: number[] }
    >;

    beacon(overrides?: CallOverrides): Promise<[string]>;

    createFeeder(
      baseIndex: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feederToBaseIndex(
      feeder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { baseIndex: string }>;

    getAllFeeders(overrides?: CallOverrides): Promise<[string[]]>;

    getAllFeedersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllIndexes(overrides?: CallOverrides): Promise<[string[]]>;

    getPrice(
      baseIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { price: BigNumber; timestamp: number }>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      admin: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pyth(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPythFeederId(
      baseIndex: PromiseOrValue<BytesLike>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  allFeeders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  baseIndexToFeeder(
    baseIndex: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  batchCreateFeeder(
    baseIndexes: PromiseOrValue<BytesLike>[],
    ids: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchGetPrice(
    baseIndexes: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], number[]] & { prices: BigNumber[]; timestamps: number[] }
  >;

  beacon(overrides?: CallOverrides): Promise<string>;

  createFeeder(
    baseIndex: PromiseOrValue<BytesLike>,
    id: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feederToBaseIndex(
    feeder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllFeeders(overrides?: CallOverrides): Promise<string[]>;

  getAllFeedersLength(overrides?: CallOverrides): Promise<BigNumber>;

  getAllIndexes(overrides?: CallOverrides): Promise<string[]>;

  getPrice(
    baseIndex: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { price: BigNumber; timestamp: number }>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  guardian(overrides?: CallOverrides): Promise<string>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    admin: PromiseOrValue<string>,
    operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pyth(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPythFeederId(
    baseIndex: PromiseOrValue<BytesLike>,
    _id: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    allFeeders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    baseIndexToFeeder(
      baseIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    batchCreateFeeder(
      baseIndexes: PromiseOrValue<BytesLike>[],
      ids: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    batchGetPrice(
      baseIndexes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], number[]] & { prices: BigNumber[]; timestamps: number[] }
    >;

    beacon(overrides?: CallOverrides): Promise<string>;

    createFeeder(
      baseIndex: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    feederToBaseIndex(
      feeder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllFeeders(overrides?: CallOverrides): Promise<string[]>;

    getAllFeedersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getAllIndexes(overrides?: CallOverrides): Promise<string[]>;

    getPrice(
      baseIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { price: BigNumber; timestamp: number }>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    guardian(overrides?: CallOverrides): Promise<string>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      admin: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pyth(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPythFeederId(
      baseIndex: PromiseOrValue<BytesLike>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "FeederCreated(address,bytes32)"(
      feeder?: PromiseOrValue<string> | null,
      symbolHash?: null
    ): FeederCreatedEventFilter;
    FeederCreated(
      feeder?: PromiseOrValue<string> | null,
      symbolHash?: null
    ): FeederCreatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetPythAddress(address)"(pyth?: null): SetPythAddressEventFilter;
    SetPythAddress(pyth?: null): SetPythAddressEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    allFeeders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseIndexToFeeder(
      baseIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchCreateFeeder(
      baseIndexes: PromiseOrValue<BytesLike>[],
      ids: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchGetPrice(
      baseIndexes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beacon(overrides?: CallOverrides): Promise<BigNumber>;

    createFeeder(
      baseIndex: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feederToBaseIndex(
      feeder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllFeeders(overrides?: CallOverrides): Promise<BigNumber>;

    getAllFeedersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getAllIndexes(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      baseIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admin: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pyth(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPythFeederId(
      baseIndex: PromiseOrValue<BytesLike>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allFeeders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseIndexToFeeder(
      baseIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchCreateFeeder(
      baseIndexes: PromiseOrValue<BytesLike>[],
      ids: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchGetPrice(
      baseIndexes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createFeeder(
      baseIndex: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feederToBaseIndex(
      feeder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllFeeders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllFeedersLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllIndexes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      baseIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pyth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPythFeederId(
      baseIndex: PromiseOrValue<BytesLike>,
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
